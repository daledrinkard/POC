<?xml version="1.0" ?>
<raModuleDescription>
    <!-- PDC XML START here-->
    <config id="config.driver.pdc" path="fsp_cfg/r_pdc_cfg.h" version="0">
        <property default="config.driver.pdc.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.pdc.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.pdc.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.pdc.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.pdc.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>
#ifdef __cplusplus
extern "C" {
#endif

#define PDC_CFG_PARAM_CHECKING_ENABLE ${config.driver.pdc.param_checking_enable}

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.driver.pdc" display="Graphics|${module.driver.pdc.name} Parallel Data Capture (r_pdc)" id="module.driver.pdc_on_pdc" version="1" url="group___p_d_c.html">
        <constraint display="Module instances must have unique names">
            "${interface.driver.pdc.${module.driver.pdc.name}}" === "1"
        </constraint>
        <constraint display="Requires lower level transfer driver">
            testExists("${module.driver.pdc_on_pdc.requires.transfer::module.driver.transfer.name}")
        </constraint>
        <constraint display="When DMAC is used, Transfer End Interrupt must be enabled in the Transfer (r_dmac) module">
            ("${interface.driver.transfer_on_dtc.${module.driver.pdc_on_pdc.requires.transfer::module.driver.transfer.name}}" === "1") ||
            ("${module.driver.pdc_on_pdc.requires.transfer::module.driver.transfer.ipl}" != "_disabled")
        </constraint>
        <constraint display="When DMAC is used, DTC interrupt must be disabled">
            ("${interface.driver.transfer_on_dtc.${module.driver.pdc_on_pdc.requires.transfer::module.driver.transfer.name}}" === "1") ||
            ("${module.driver.pdc.transfer_req_ipl}" == "_disabled")
        </constraint>
        <constraint display="When DTC is used, DTC interrupt must be enabled">
            ("${interface.driver.transfer_on_dmac.${module.driver.pdc_on_pdc.requires.transfer::module.driver.transfer.name}}" === "1") ||
            ("${module.driver.pdc.transfer_req_ipl}" != "_disabled")
        </constraint>
        <constraint display="Requires PDC Peripheral">
          "${interface.mcu.pdc.external}" === "1"
        </constraint>
        <requires id="module.driver.pdc_on_pdc.requires.pdc" interface="interface.mcu.pdc.external" visible="false" display="Requires PDC Peripheral" />
        <requires id="module.driver.pdc_on_pdc.requires.transfer" interface="interface.driver.transfer" display="Add Transfer Driver (DMAC or DTC) [Required]">
            <override property="module.driver.transfer.size" value= "module.driver.transfer.size.size_4_byte"/>
            <override property="module.driver.transfer.mode" value= "module.driver.transfer.mode.mode_block"/>
            <override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_incremented"/>
            <override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_fixed"/>
            <override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_source"/>
            <override property="module.driver.transfer.p_dest" value="NULL"/>
            <override property="module.driver.transfer.p_src" value="NULL"/>
            <override property="module.driver.transfer.length" value="8"/>
            <override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
            <override property="module.driver.transfer.num_blocks" value="1"/>
            <override property="module.driver.transfer.auto_enable" value="module.driver.transfer.auto_enable.false"/>
            <override property="module.driver.transfer.p_callback" value="${module.driver.pdc.name}_transfer_callback"/>
            <override property="module.driver.transfer.p_context" value="&amp;${module.driver.pdc.name}_ctrl"/>
            <override property="module.driver.transfer.activation_source" value="_signal.event.pdc.receive.data.ready"/>
            <override property="module.driver.transfer.activation_event" value="_signal.event.pdc.receive.data.ready"/>
        </requires>
        <provides interface="interface.driver.pdc" />
        <provides interface="interface.driver.pdc_on_capture" />
        <provides interface="interface.driver.pdc.${module.driver.pdc.name}" />

        <!-- General Configurations -->
        <property id="module.driver.pdc.name" display="General|Name" default="g_pdc${_instance}" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.pdc.name}")</constraint>
            <signal event="event.pdc.receive.data.ready" />
        </property>

        <!-- Input Configurations -->
        <property id="module.driver.pdc.bytes_per_pixel" display="Input|Bytes per pixel" default="2" description="Specify the number of bytes per pixel of the captured image data.">
            <constraint display="Value must be an integer greater than 0">testInteger("${module.driver.pdc.bytes_per_pixel}")  &amp;&amp; ("${module.driver.pdc.bytes_per_pixel}" &gt; 0)</constraint>
        </property>
        <property id="module.driver.pdc.single_image_buffer_size" default="">
            <export>
            eval('' +
                'var buffer_size = 0;' +
                'buffer_size = \"${module.driver.pdc.x_pixels} * ${module.driver.pdc.y_pixels} * ${module.driver.pdc.bytes_per_pixel}\";' +
                'buffer_size')
            </export>
        </property>
        <property id="module.driver.pdc.clock_division" display="Input|Clock divider" default="module.driver.pdc.clock_division.division_2" description="Specify the clock divider for clock frequency of the clock input PCKO to the PDC peripheral.">
            <option display="CLK/2" id="module.driver.pdc.clock_division.division_2" value="PDC_CLOCK_DIVISION_2"/>
            <option display="CLK/4" id="module.driver.pdc.clock_division.division_4" value="PDC_CLOCK_DIVISION_4"/>
            <option display="CLK/6" id="module.driver.pdc.clock_division.division_6" value="PDC_CLOCK_DIVISION_6"/>
            <option display="CLK/8" id="module.driver.pdc.clock_division.division_8" value="PDC_CLOCK_DIVISION_8"/>
            <option display="CLK/10" id="module.driver.pdc.clock_division.division_10" value="PDC_CLOCK_DIVISION_10"/>
            <option display="CLK/12" id="module.driver.pdc.clock_division.division_12" value="PDC_CLOCK_DIVISION_12"/>
            <option display="CLK/14" id="module.driver.pdc.clock_division.division_14" value="PDC_CLOCK_DIVISION_14"/>
            <option display="CLK/16" id="module.driver.pdc.clock_division.division_16" value="PDC_CLOCK_DIVISION_16"/>
        </property>
        <property id="module.driver.pdc.endian" display="Input|Endianess" default="module.driver.pdc.endian.little" description="Specify the endianness of the captured image data.">
            <option display="Little" id="module.driver.pdc.endian.little" value="PDC_ENDIAN_LITTLE"/>
            <option display="Big" id="module.driver.pdc.endian.big" value="PDC_ENDIAN_BIG"/>
        </property>
        <property id="module.driver.pdc.hsync_polarity" display="Input|Signal polarity|HSYNC" default="module.driver.pdc.hsync_polarity.high" description="Specify the active polarity of the HSYNC signal.">
            <option display="High" id="module.driver.pdc.hsync_polarity.high" value="PDC_HSYNC_POLARITY_HIGH"/>
            <option display="Low" id="module.driver.pdc.hsync_polarity.low" value="PDC_HSYNC_POLARITY_LOW"/>
        </property>
        <property id="module.driver.pdc.vsync_polarity" display="Input|Signal polarity|VSYNC" default="module.driver.pdc.vsync_polarity.high" description="Specify the active polarity of the VSYNC signal.">
            <option display="High" id="module.driver.pdc.vsync_polarity.high" value="PDC_VSYNC_POLARITY_HIGH"/>
            <option display="Low" id="module.driver.pdc.vsync_polarity.low" value="PDC_VSYNC_POLARITY_LOW"/>
        </property>
        <property id="module.driver.pdc.x_pixels" display="Input|Capture Specifications|Number of pixels to capture horizontally" default="640" description="Specify the number of horizontal pixels to capture.">
            <constraint display="Value must be an integer greater than 0">testInteger("${module.driver.pdc.x_pixels}")  &amp;&amp; ("${module.driver.pdc.x_pixels}" &gt; 0)</constraint>
        </property>
        <property id="module.driver.pdc.y_pixels" display="Input|Capture Specifications|Number of lines to capture vertically" default="480" description="Specify the number of vertical pixels to capture.">
            <constraint display="Value must be an integer greater than 0">testInteger("${module.driver.pdc.y_pixels}")  &amp;&amp; ("${module.driver.pdc.y_pixels}" &gt; 0)</constraint>
        </property>
        <property id="module.driver.pdc.x_start_pixel" display="Input|Capture Specifications|Horizontal pixel to start capture from" default="0" description="Specify the horizontal pixel to start capturing image data from. Allows an image smaller than the native resolution of a camera to be captured.">
            <constraint display="Value must be an integer">testInteger("${module.driver.pdc.x_start_pixel}")</constraint>
        </property>
        <property id="module.driver.pdc.y_start_pixel" display="Input|Capture Specifications|Line to start capture from" default="0" description="Specify the vertical line to start capturing image data from. Allows an image smaller than the native resolution of a camera to be captured.">
            <constraint display="Value must be an integer">testInteger("${module.driver.pdc.y_start_pixel}")</constraint>
        </property>

        <!-- Output Configurations -->
        <property id="module.driver.pdc.number_of_buffers" display="Output|Buffer|Number of image buffers" default="1" description="Specify the number of buffers to create.">
            <constraint display="Value must be an integer greater than 0">testInteger("${module.driver.pdc.number_of_buffers}")  &amp;&amp; ("${module.driver.pdc.number_of_buffers}" &gt; 0)</constraint>
        </property>

        <!-- Interrupt Configurations -->
        <property id="module.driver.pdc.p_callback" display="Interrupts|Callback" default="g_pdc_user_callback" description="A user callback function must be provided. This callback is invoked for every successful frame capture and any error conditions">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.pdc.p_callback}")</constraint>
        </property>
        <property id="module.driver.pdc.p_context" default="NULL" description="Pointer to the context structure to be passed through the callback argument"/>
        <property default="" display="Interrupts|PDC Interrupt Priority" id="module.driver.pdc.ipl" description="Select the PDC interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
            <interrupt event="event.pdc.int" isr="pdc_int_isr"/>
        </property>
        <property default="" display="Interrupts|DTC Interrupt Priority" id="module.driver.pdc.transfer_req_ipl" description="Select the DTC interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
            <interrupt event="event.pdc.receive.data.ready" isr="pdc_transfer_req_isr"/>
        </property>
        <peripheral name="PDC" component="pdc" />
        <header>
            /** PDC on Capture instance */
            extern const capture_instance_t ${module.driver.pdc.name};
            /** Access the PDC instance using these structures when calling API functions directly (::p_api is not used). */
            extern pdc_instance_ctrl_t ${module.driver.pdc.name}_ctrl;
            extern capture_cfg_t ${module.driver.pdc.name}_cfg;
            #ifndef ${module.driver.pdc.p_callback}
            void ${module.driver.pdc.p_callback}(capture_callback_args_t * p_args);
            #endif
        </header>
        <includes>
            #include &quot;r_pdc.h&quot;
            #include &quot;r_capture_api.h&quot;
        </includes>
        <declarations>
            #define RA_NOT_DEFINED (UINT32_MAX)
            #if (RA_NOT_DEFINED) != (${module.driver.pdc_on_pdc.requires.transfer::module.driver.transfer.offset})

            /* If the transfer module is DMAC, define a DMAC transfer callback. */
            #include "r_dmac.h"
            extern void r_pdc_transfer_callback(pdc_instance_ctrl_t * p_ctrl);

            void ${module.driver.pdc.name}_transfer_callback (dmac_callback_args_t * p_args)
            {
                r_pdc_transfer_callback((pdc_instance_ctrl_t *) p_args->p_context);
            }
            #endif
            #undef RA_NOT_DEFINED

            pdc_instance_ctrl_t ${module.driver.pdc.name}_ctrl;

            pdc_extended_cfg_t ${module.driver.pdc.name}_ext_cfg =
            {
                .clock_division         = ${module.driver.pdc.clock_division},
                .endian                 = ${module.driver.pdc.endian},
                .hsync_polarity         = ${module.driver.pdc.hsync_polarity},
                .vsync_polarity         = ${module.driver.pdc.vsync_polarity},
                .pdc_ipl                = ${module.driver.pdc.ipl},
                .transfer_req_ipl       = ${module.driver.pdc.transfer_req_ipl},
                #if defined(VECTOR_NUMBER_PDC_INT)
                .pdc_irq                 = VECTOR_NUMBER_PDC_INT,
                #else
                .pdc_irq                 = FSP_INVALID_VECTOR,
                #endif
                #if defined(VECTOR_NUMBER_PDC_RECEIVE_DATA_READY)
                .transfer_req_irq        = VECTOR_NUMBER_PDC_RECEIVE_DATA_READY,
                #else
                .transfer_req_irq        = FSP_INVALID_VECTOR,
                #endif
                .p_lower_lvl_transfer   = &amp;${module.driver.pdc_on_pdc.requires.transfer::module.driver.transfer.name},
            };
            capture_cfg_t ${module.driver.pdc.name}_cfg =
            {
              .x_capture_start_pixel  = ${module.driver.pdc.x_start_pixel},
              .x_capture_pixels       = ${module.driver.pdc.x_pixels},
              .y_capture_start_pixel  = ${module.driver.pdc.y_start_pixel},
              .y_capture_pixels       = ${module.driver.pdc.y_pixels},
              .bytes_per_pixel        = ${module.driver.pdc.bytes_per_pixel},
              .p_callback             = ${module.driver.pdc.p_callback},
#if defined(${module.driver.pdc.p_context})
              .p_context              = ${module.driver.pdc.p_context},
#else
              .p_context              = &amp;${module.driver.pdc.p_context},
#endif
              .p_extend               = &amp;${module.driver.pdc.name}_ext_cfg,
            };

            const capture_instance_t ${module.driver.pdc.name} =
            {
                .p_ctrl = &amp;${module.driver.pdc.name}_ctrl,
                .p_cfg =  &amp;${module.driver.pdc.name}_cfg,
                .p_api =  &amp;g_pdc_on_capture, //g_pdc_on_capture
            };
        </declarations>
        <api configurable="true">
            <file>ra/fsp/inc/instances/r_pdc.h</file>
            <file>ra/fsp/inc/api/r_elc_api.h</file>
            <file>ra/fsp/inc/api/r_capture_api.h</file>
            <file>ra/fsp/inc/api/r_transfer_api.h</file>
        </api>
    </module>
    <developerSupport>
      <template category="none" display="Image Buffer" id="module.driver.pdc.data_buffer" version="1">
          <platform id="fsp" max="" min="4.0.0"/>
          <moduleRef id="module.driver.pdc_on_pdc"/>
          <content>/* CEU User Defined Image Buffer ${name:raProperty(module.driver.pdc.name)} */
uint8_t ${name:raProperty(module.driver.pdc.name)}_data_buffer[${number_of_buffers:raProperty(module.driver.pdc.number_of_buffers)}][${single_image_buffer_size:raProperty(module.driver.pdc.single_image_buffer_size)}] __attribute__((section(".bss")));</content>
      </template>
    </developerSupport>
</raModuleDescription>
