<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.middleware.emwin_port" path="fsp_cfg/rm_emwin_port_cfg.h" version="0">
        <property default="32768" display="Memory Allocation|GUI Heap Size" id="config.middleware.emwin_port.heapsize" description="Set the size of the heap to be allocated for use exclusively by emWin.">
            <constraint display="Value must be a non-negative integer">testInteger("${config.middleware.emwin_port.heapsize}")  &amp;&amp; ("${config.middleware.emwin_port.heapsize}" &gt;= 0)</constraint>
        </property>
        <property default=".noinit" display="Memory Allocation|Section for GUI Heap" id="config.middleware.emwin_port.heapsection" description="Specify the section in which to allocate the GUI heap. When Arm Compiler 6 is used to place this memory in on-chip SRAM, the section name must be .bss or start with .bss. to avoid consuming unnecessary ROM space." />
        <property default="16" display="Memory Allocation|Maximum Layers" id="config.middleware.emwin_port.layercount" description="Set the maximum number of available display layers in emWin.\n\nThis setting is not related to GLCDC Layer 1 or 2.">
            <constraint display="Value must be a non-negative integer">testInteger("${config.middleware.emwin_port.layercount}")  &amp;&amp; ("${config.middleware.emwin_port.layercount}" &gt;= 0)</constraint>
        </property>
        <property default="400" display="Memory Allocation|AA Font Conversion Buffer Size" id="config.middleware.emwin_port.aa_font_buffer" description="Set the size of the conversion buffer for anti-aliased font glyphs. This should be set to the size (in bytes) of the largest AA character to be rendered.">
            <constraint display="Value must be a non-negative integer">testInteger("${config.middleware.emwin_port.aa_font_buffer}")  &amp;&amp; ("${config.middleware.emwin_port.aa_font_buffer}" &gt;= 0)</constraint>
        </property>
        <property default="config.middleware.emwin_port.vsync_wait.enabled" display="LCD Settings|Wait for Vertical Sync" id="config.middleware.emwin_port.vsync_wait" description="When enabled emWin will wait for a vertical sync event each time the display is updated. If an RTOS is used the thread will yield; otherwise each frame will block until Vsync.\n\nWARNING: Disabling vertical sync will result in tearing. It is recommended to always leave this setting Enabled if an RTOS is used.">
            <option display="Enabled" id="config.middleware.emwin_port.vsync_wait.enabled" value="(1)"/>
            <option display="Disabled" id="config.middleware.emwin_port.vsync_wait.disabled" value="(0)"/>
        </property>
        <property default="config.middleware.emwin_port.alignment.enabled" display="JPEG Decoding|General|Input Alignment" id="config.middleware.emwin_port.alignment" description="Setting this option to 8-bit alignment can allow the hardware JPEG Codec to directly read JPEG data. This speeds up JPEG decoding operations and reduces RAM overhead, but all JPEG images must reside on an 8-byte boundary.\n\nWhen this option is enabled the input buffer is not allocated.">
            <option display="8-byte aligned (faster)" id="config.middleware.emwin_port.alignment.enabled" value="(1)"/>
            <option display="Unaligned (slower)" id="config.middleware.emwin_port.alignment.disabled" value="(0)"/>
        </property>
        <property default="config.middleware.emwin_port.double_buffer.output.disabled" display="JPEG Decoding|General|Double-Buffer Output" id="config.middleware.emwin_port.double_buffer.output" description="Enable this option to configure JPEG decoding operations to use a double-buffered output pipeline. This allows the JPEG to be rendered to the display at the same time as decoding at the cost of additional RAM usage.\n\nEnabling this option automatically allocates double the output buffer size.">
            <option display="Enabled" id="config.middleware.emwin_port.double_buffer.output.enabled" value="(1)"/>
            <option display="Disabled" id="config.middleware.emwin_port.double_buffer.output.disabled" value="(0)"/>
        </property>
        <property default="50" display="JPEG Decoding|General|Error Timeout" id="config.middleware.emwin_port.timeout" description="Set the timeout for JPEG decoding operations (in RTOS ticks) in the event of a decode error.">
            <constraint display="Value must be a non-negative integer">testInteger("${config.middleware.emwin_port.timeout}")  &amp;&amp; ("${config.middleware.emwin_port.timeout}" &gt;= 0)</constraint>
        </property>
        <property default="0x1000" display="JPEG Decoding|Buffers|Input Buffer Size" id="config.middleware.emwin_port.insize" description="Set the size of the JPEG decode input buffer (in bytes). This buffer is used to ensure 8-byte alignment of input data. Specifying a size smaller than the size of the JPEG to decode will use additional interrupts to stream data in during the decoding process.">
            <constraint display="Value must be a non-negative integer">testInteger("${config.middleware.emwin_port.insize}")  &amp;&amp; ("${config.middleware.emwin_port.insize}" &gt;= 0)</constraint>
            <!-- <constraint display="Value must be divisible by 8">("${config.middleware.emwin_port.insize}"%8 === 0)</constraint> -->
        </property>
        <property default="0x3C00" display="JPEG Decoding|Buffers|Output Buffer Size" id="config.middleware.emwin_port.outsize" description="Set the size of the JPEG decode output buffer (in bytes). An output buffer smaller than the size of a decoded image will use additional interrupts to stream the data into a framebuffer.\n\nUnless you are sure of the subsampling used in and the size of the input JPEG images it is recommended to allocate at least 16 framebuffer lines of memory.">
            <constraint display="Value must be a non-negative integer">testInteger("${config.middleware.emwin_port.outsize}")  &amp;&amp; ("${config.middleware.emwin_port.outsize}" &gt;= 0)</constraint>
            <!-- <constraint display="Value must be divisible by 8">("${config.middleware.emwin_port.insize}"%8 === 0)</constraint> -->
        </property>
        <property default=".noinit" display="JPEG Decoding|Buffers|Section for Buffers" id="config.middleware.emwin_port.jpegsection" description="Specify the section in which to allocate the JPEG work buffers. When Arm Compiler 6 is used to place this memory in on-chip SRAM, the section name must be .bss or start with .bss. to avoid consuming unnecessary ROM space." />
        <content>
#include "common_data.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Library build settings */
#define GUI_OS                (1) // Context switch support enabled
#define GUI_MAXTASK           (1) // One task supported by default (can be increased at runtime via GUITASK_SetMaxTask())
#define GUI_NUM_LAYERS        (3) // Up to three displays supported
#define GUI_SUPPORT_TOUCH     (1) // Support touch screens
#define GUI_SUPPORT_MOUSE     (1) // Support a mouse
#define GUI_SUPPORT_MEMDEV    (1) // Memory devices available
#define GUI_WINSUPPORT        (1) // Window manager available
#define GUI_SUPPORT_BIDI      (1) // Bidirectional text enabled
#define GUI_DEBUG_LEVEL       (2) // Parameter and consistency checks enabled (no logging)

/* Define the available number of bytes available for the GUI */
#define GUI_NUMBYTES     (${config.middleware.emwin_port.heapsize})
#define GUI_HEAPSECTION  "${config.middleware.emwin_port.heapsection}"

/* RTOS support */
#ifndef EMWIN_CFG_RTOS
 #define EMWIN_CFG_RTOS     (BSP_CFG_RTOS)
#endif

/* Wait for Vertical Sync */
#define EMWIN_LCD_VSYNC_WAIT (${config.middleware.emwin_port.vsync_wait})

/* AA Font rendering */
#define EMWIN_LCD_AA_FONT_CONV_BUFFER_SIZE  (${config.middleware.emwin_port.aa_font_buffer})

/* JPEG Decode settings */
#if EMWIN_JPEG_USE_HW
 #define EMWIN_JPEG_NOCOPY               (${config.middleware.emwin_port.alignment})
 #define EMWIN_JPEG_DOUBLE_BUFFER_OUTPUT (${config.middleware.emwin_port.double_buffer.output})
 #define EMWIN_JPEG_TIMEOUT              (${config.middleware.emwin_port.timeout})
 #if !EMWIN_JPEG_NOCOPY
  #define EMWIN_JPEG_NUMBYTES_INBUFFER    (${config.middleware.emwin_port.insize})
 #else
  #define EMWIN_JPEG_NUMBYTES_INBUFFER    (0xFFFFFFF8U)
 #endif
 #define EMWIN_JPEG_NUMBYTES_OUTBUFFER   (${config.middleware.emwin_port.outsize})
 #define EMWIN_JPEG_BUFFER_SECTION       "${config.middleware.emwin_port.jpegsection}"
#endif

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.middleware.emwin_port" display="Graphics|SEGGER emWin RA Port (rm_emwin_port)" id="module.middleware.emwin_port" common="1" version="1" visible="false" url="group___r_m___e_m_w_i_n___p_o_r_t.html">
        <constraint display="Only one emWin instance can be used at a time.">
          "${interface.middleware.emwin_port}" === "1"
        </constraint>
        <constraint display="emWin requires the GLCDC.">
            "${interface.driver.display.${module.middleware.emwin_port.requires.display::module.driver.display.name}}" === "1"
        </constraint>
        <constraint display="The GLCDC Line Detect Interrupt must be enabled.">
          !(("${config.middleware.emwin_port.vsync_wait}" == "config.middleware.emwin_port.vsync_wait.enabled") &amp;&amp; ("${module.middleware.emwin_port.requires.display::module.driver.display.line_detect_ipl}" == "_disabled"))
        </constraint>
        <constraint display="JPEG Codec support requires the DRW Engine.">
          !(("${interface.driver.jpeg.${module.middleware.emwin_port.requires.jpeg::module.driver.jpeg.name}}" === "1") &amp;&amp;
            (!testExists("${module.middleware.emwin_port.requires.dave2d_port::module.driver.drw.handle_name}")))
        </constraint>
        <constraint display="Hardware acceleration is not supported in this color mode.">
          !((("${module.middleware.emwin_port.requires.display::module.driver.display.input0.format}" === "module.driver.display.input0.format.in_format_clut8") || ("${module.middleware.emwin_port.requires.display::module.driver.display.input0.format}" === "module.driver.display.input0.format.in_format_16bits_argb1555") || ("${module.middleware.emwin_port.requires.display::module.driver.display.input0.format}" === "module.driver.display.input0.format.in_format_clut1") || ("${module.middleware.emwin_port.requires.display::module.driver.display.input0.format}" === "module.driver.display.input0.format.in_format_clut4")) &amp;&amp;
            (testExists("${module.middleware.emwin_port.requires.dave2d_port::module.driver.drw.handle_name}")))
        </constraint>
        <requires id="module.middleware.emwin_port.requires.display" interface="interface.driver.display" display="Add Display Driver" find="true">
            <override property="module.driver.display.callback" value="_DisplayVsyncCallback"/>
            <override property="module.driver.display.input0.enable" value="module.driver.display.input0.enable"/>
        </requires>
        <requires id="module.middleware.emwin_port.requires.dave2d_port" interface="interface.driver.dave2d_port" display="Add 2D Accelerator [Recommended]" find="true" />
        <requires id="module.middleware.emwin_port.requires.jpeg" interface="interface.driver.jpeg" display="Add JPEG Codec [Recommended but optional]" find="false" optional="true" >
            <override property="module.driver.jpeg.decode.output_data_order" value="module.driver.jpeg.decode.input_data_order.normal"/>
            <override property="module.driver.jpeg.decode.p_callback" value="_JPEGDecodeCallback"/>
        </requires>
        <requires id="module.middleware.emwin_port.requires.rtos" interface="interface.rtos.supports.emwin" visible="false" display="Requires FreeRTOS or Bare Metal project"/>
        <provides interface="interface.middleware.emwin_port" />
        <header>
/* emWin physical display specs */
#define EMWIN_LCD_XSIZE_PHYS       (DISPLAY_BUFFER_STRIDE_PIXELS_INPUT0)
#define EMWIN_LCD_YSIZE_PHYS       (${module.middleware.emwin_port.requires.display::module.driver.display.input0.vsize})

#if defined (DISPLAY_IN_FORMAT_32BITS_RGB888_0) || defined (DISPLAY_IN_FORMAT_32BITS_ARGB8888_0)
 #define EMWIN_LCD_BITS_PER_PIXEL   (32)
 #define EMWIN_LCD_DISPLAY_DRIVER   GUIDRV_LIN_32
 #if defined (DISPLAY_IN_FORMAT_32BITS_RGB888_0)
  #define EMWIN_LCD_COLOR_CONVERSION GUICC_M888
 #else
  #define EMWIN_LCD_COLOR_CONVERSION GUICC_M8888I
 #endif
#elif defined (DISPLAY_IN_FORMAT_16BITS_RGB565_0) || defined (DISPLAY_IN_FORMAT_16BITS_ARGB1555_0) || defined (DISPLAY_IN_FORMAT_16BITS_ARGB4444_0)
 #define EMWIN_LCD_BITS_PER_PIXEL   (16)
 #define EMWIN_LCD_DISPLAY_DRIVER   GUIDRV_LIN_16
 #if defined (DISPLAY_IN_FORMAT_16BITS_RGB565_0)
  #define EMWIN_LCD_COLOR_CONVERSION GUICC_M565
 #elif defined (DISPLAY_IN_FORMAT_16BITS_ARGB1555_0)
  #define EMWIN_LCD_COLOR_CONVERSION GUICC_M1555I
 #else
  #define EMWIN_LCD_COLOR_CONVERSION GUICC_M4444I
 #endif
#elif defined (DISPLAY_IN_FORMAT_CLUT8_0)
 #define EMWIN_LCD_BITS_PER_PIXEL   (8)
 #define EMWIN_LCD_COLOR_CONVERSION GUICC_8666
 #define EMWIN_LCD_DISPLAY_DRIVER   GUIDRV_LIN_8
#elif defined (DISPLAY_IN_FORMAT_CLUT4_0)
 #define EMWIN_LCD_BITS_PER_PIXEL   (4)
 #define EMWIN_LCD_COLOR_CONVERSION GUICC_16
 #define EMWIN_LCD_DISPLAY_DRIVER   GUIDRV_LIN_4
#else
 #define EMWIN_LCD_BITS_PER_PIXEL   (1)
 #define EMWIN_LCD_COLOR_CONVERSION GUICC_1
 #define EMWIN_LCD_DISPLAY_DRIVER   GUIDRV_LIN_1
#endif

#define EMWIN_LCD_XSTRIDE_PHYS          (((EMWIN_LCD_XSIZE_PHYS * EMWIN_LCD_BITS_PER_PIXEL + 0x1FF) &amp; 0xFFFFFE00) / EMWIN_LCD_BITS_PER_PIXEL)

#define EMWIN_LCD_FRAMEBUFFER_PTR       (${module.middleware.emwin_port.requires.display::module.driver.display.input0.buffer_name}[0])
#define EMWIN_LCD_NUM_FRAMEBUFFERS      (${module.middleware.emwin_port.requires.display::module.driver.display.input0.buffer_number})

/* Hardware acceleration macros */
#define RA_NOT_DEFINED    (1)
#if (RA_NOT_DEFINED == ${module.middleware.emwin_port.requires.dave2d_port::module.driver.drw.handle_name}) || (EMWIN_LCD_BITS_PER_PIXEL &lt; 16)
 #define EMWIN_LCD_USE_DAVE      (false)
 #define EMWIN_JPEG_USE_HW   (false)
#else
 #define EMWIN_LCD_USE_DAVE      (true)
  #if (RA_NOT_DEFINED == ${module.middleware.emwin_port.requires.jpeg::module.driver.jpeg.name})
  #define EMWIN_JPEG_USE_HW  (false)
 #else
  #define EMWIN_JPEG_USE_HW  (true)
 #endif
#endif
#undef RA_NOT_DEFINED
        </header>
        <declarations>
display_instance_t const * _g_display_emwin = &amp;${module.middleware.emwin_port.requires.display::module.driver.display.name};

#if EMWIN_LCD_USE_DAVE
d2_device ** _d2_handle_emwin = &amp;${module.middleware.emwin_port.requires.dave2d_port::module.driver.drw.handle_name};
#if EMWIN_JPEG_USE_HW
jpeg_instance_t const * _g_jpeg_emwin_decode = &amp;${module.middleware.emwin_port.requires.jpeg::module.driver.jpeg.name};
#endif
#endif

uint8_t * _fb_emwin;
        </declarations>
    </module>
</raModuleDescription>
