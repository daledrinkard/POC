<?xml version="1.0" ?>

<raModuleDescription>
    <config id="config.driver.http_onchip_da16xxx" path="fsp_cfg/rm_http_onchip_da16xxx_cfg.h" version="0">
        <property default="config.driver.http_onchip_da16xxx.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.http_onchip_da16xxx.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.http_onchip_da16xxx.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.http_onchip_da16xxx.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.http_onchip_da16xxx.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>
        #ifdef __cplusplus
        extern "C" {
        #endif

        #define HTTP_ONCHIP_DA16XXX_CFG_PARAM_CHECKING_ENABLED          (${config.driver.http_onchip_da16xxx.param_checking_enable})

        #ifdef __cplusplus
        }
        #endif
        </content>
    </config>
    <module config="config.driver.http_onchip_da16xxx" id="module.driver.http_onchip_da16xxx" display="Networking|HTTP Client on DA16XXX (rm_http_onchip_da16xxx)" visible="true" version="1" url="group___h_t_t_p___o_n_c_h_i_p___d_a16_x_x_x.html">
        <constraint display="Mutexes must be enabled in the FreeRTOS thread config under Common|General|Use Mutexes.">
          ("${config.awsfreertos.thread.configuse_mutexes}" === "config.awsfreertos.thread.configuse_mutexes.enabled") ||
            !testExists("${interface.rtos.awsfreertos}")
        </constraint>
        <requires id="module.driver.http_onchip_da16xxx.requires.wifi_da16xxx" interface="interface.driver.wifi_da16xxx" display="Add WiFi" find="true">
            <override property="config.driver.wifi_da16xxx.num_sockets" value="config.driver.wifi_da16xxx.num_sockets.one"/>
            <override property="config.driver.wifi_da16xxx.socket_rx_size" value="0"/>
        </requires>
        <provides interface="interface.driver.http_onchip_da16xxx"/>
        <provides interface="interface.driver.http"/>
        <property default="" display="Certificates|HTTP Certificates Header File" id="module.driver.http_onchip_da16xxx.http_certs" description="Name of header file that will contain certificates (macros). User must create header file if this field is populated.">
            <constraint display="Must be a valid C symbol">testSymbol("${module.driver.http_onchip_da16xxx.http_certs}")</constraint>
            <export><![CDATA[eval('' +
'  var string = "";                                                                     ' +
'                                                                                       ' +
'  /* If empty string then NULL */                                                      ' +
'  if("${module.driver.http_onchip_da16xxx.http_certs}" != "")                          ' +
'  {                                                                                    ' +
'    string = "#include \\\"${module.driver.http_onchip_da16xxx.http_certs}.h\\\"\\n";  ' +
'    string += "#define CERT_INCLUDE"                                                   ' +
'  }                                                                                    ' +
'  /* Output final result */                                                            ' +
'  string                                                                               ' +
  '')
]]>            </export>
        </property>
        <property default="ROOT_CA" display="Certificates|Root CA" id="module.driver.http_onchip_da16xxx.root_ca" description="Links to user-defined macro of the same name for Root CA which user must define in application header.">
            <constraint display="Must be a valid C symbol">testSymbol("${module.driver.http_onchip_da16xxx.root_ca}")</constraint>
        </property>
        <property default="CLIENT_CERT" display="Certificates|Client Certificate" id="module.driver.http_onchip_da16xxx.client_cert" description="Links to user-defined macro of the same name for client certificate which user must define in application header.">
            <constraint display="Must be a valid C symbol">testSymbol("${module.driver.http_onchip_da16xxx.client_cert}")</constraint>
        </property>
        <property default="PRIVATE_KEY" display="Certificates|Private Key" id="module.driver.http_onchip_da16xxx.private_key" description="Links to user-defined macro of the same name for private key which user must define in application header.">
            <constraint display="Must be a valid C symbol">testSymbol("${module.driver.http_onchip_da16xxx.private_key}")</constraint>
        </property>

        <property default="" display="ALPN|ALPN 1" id="module.driver.http_onchip_da16xxx.alpn_1" description="Select Application Layer Protocol Negotiations (ALPNs)">
            <export><![CDATA[eval('' +
'  var string = "";                                                                     ' +
'                                                                                       ' +
'  /* If empty string then NULL */                                                      ' +
'  if("${module.driver.http_onchip_da16xxx.alpn_1}" == "")                              ' +
'  {                                                                                    ' +
'    string = "NULL";                                                                   ' +
'  }                                                                                    ' +
'  else string = "\\\"${module.driver.http_onchip_da16xxx.alpn_1}\\\"";                 ' +
'  /* Output final result */                                                            ' +
'  string                                                                               ' +
  '')
  ]]>            </export>
        </property>
        <property default="" display="ALPN|ALPN 2" id="module.driver.http_onchip_da16xxx.alpn_2" description="Select Application Layer Protocol Negotiations (ALPNs)">
            <export><![CDATA[eval('' +
'  var string = "";                                                                     ' +
'                                                                                       ' +
'  /* If empty string then NULL */                                                      ' +
'  if("${module.driver.http_onchip_da16xxx.alpn_2}" == "")                              ' +
'  {                                                                                    ' +
'    string = "NULL";                                                                   ' +
'  }                                                                                    ' +
'  else string = "\\\"${module.driver.http_onchip_da16xxx.alpn_2}\\\"";                 ' +
'  /* Output final result */                                                            ' +
'  string                                                                               ' +
  '')
  ]]>            </export>
        </property>
        <property default="" display="ALPN|ALPN 3" id="module.driver.http_onchip_da16xxx.alpn_3" description="Select Application Layer Protocol Negotiations (ALPNs)">
            <export><![CDATA[eval('' +
'  var string = "";                                                                     ' +
'                                                                                       ' +
'  /* If empty string then NULL */                                                      ' +
'  if("${module.driver.http_onchip_da16xxx.alpn_3}" == "")                              ' +
'  {                                                                                    ' +
'    string = "NULL";                                                                   ' +
'  }                                                                                    ' +
'  else string = "\\\"${module.driver.http_onchip_da16xxx.alpn_3}\\\"";                 ' +
'  /* Output final result */                                                            ' +
'  string                                                                               ' +
  '')
  ]]>            </export>
        </property>
        <property default="" id="module.driver.http_onchip_da16xxx.alpn_count">
            <export><![CDATA[eval('' +
'  var count = 0;                                                                       ' +
'                                                                                       ' +
'  /* If alpn populated then increment */                                               ' +
'  if("${module.driver.http_onchip_da16xxx.alpn_1}" != "")                              ' +
'  {                                                                                    ' +
'    count++;                                                                           ' +
'  }                                                                                    ' +
'  if("${module.driver.http_onchip_da16xxx.alpn_2}" != "")                              ' +
'  {                                                                                    ' +
'    count++;                                                                           ' +
'  }                                                                                    ' +
'  if("${module.driver.http_onchip_da16xxx.alpn_3}" != "")                              ' +
'  {                                                                                    ' +
'    count++;                                                                           ' +
'  }                                                                                    ' +
'  /* Output final result */                                                            ' +
'  count                                                                                ' +
  '')
  ]]>            </export>
        </property>
        <property default="" display="Server Name Indication (SNI)" id="module.driver.http_onchip_da16xxx.sni_name">
            <export><![CDATA[eval('' +
'  var string = "";                                                                     ' +
'                                                                                       ' +
'  /* If empty string then NULL */                                                      ' +
'  if("${module.driver.http_onchip_da16xxx.sni_name}" == "")                            ' +
'  {                                                                                    ' +
'    string = "NULL";                                                                   ' +
'  }                                                                                    ' +
'  else string = "\\\"${module.driver.http_onchip_da16xxx.sni_name}\\\"";               ' +
'  /* Output final result */                                                            ' +
'  string                                                                               ' +
  '')
  ]]>            </export>
        </property>
        <property default="module.driver.http_onchip_da16xxx.tls_level.0" display="TLS Authentification Level" id="module.driver.http_onchip_da16xxx.tls_level" description="Level of TLS authentication for HTTP requests.">
            <option id="module.driver.http_onchip_da16xxx.tls_level.0" display="0 (None)" value="HTTP_ONCHIP_DA16XXX_TLS_VERIFY_NONE"/>
            <option id="mmodule.driver.http_onchip_da16xxx.tls_level.1" display="1 (Optional)" value="HTTP_ONCHIP_DA16XXX_TLS_VERIFY_OPTIONAL"/>
            <option id="mmodule.driver.http_onchip_da16xxx.tls_level.2" display="2 (Required)" value="HTTP_ONCHIP_DA16XXX_TLS_VERIFY_REQUIRED"/>
        </property>
        <header>
                extern const http_onchip_da16xxx_cfg_t          g_http_onchip_da16xxx_cfg;
        </header>

        <includes>
                    #include &quot;rm_http_onchip_da16xxx.h&quot;

        </includes>

        <declarations>
                    ${module.driver.http_onchip_da16xxx.http_certs}

                    /** HTTP Onchip da16xxx configuration */
                    const http_onchip_da16xxx_cfg_t     g_http_onchip_da16xxx_cfg =
                    {
                        #define RA_NOT_DEFINED (1)
                        .alpn_count =               (${module.driver.http_onchip_da16xxx.alpn_count}),
                        .p_alpns =                  {${module.driver.http_onchip_da16xxx.alpn_1}, ${module.driver.http_onchip_da16xxx.alpn_2}, ${module.driver.http_onchip_da16xxx.alpn_3}},
                        .p_sni_name =               ${module.driver.http_onchip_da16xxx.sni_name},
                        .tls_level =                (${module.driver.http_onchip_da16xxx.tls_level}),
                        .p_transport_instance =     &amp;g_at_transport_da16xxx,
#ifdef CERT_INCLUDE
                        .p_root_ca =                ${module.driver.http_onchip_da16xxx.root_ca},
                        .root_ca_size =             (sizeof(${module.driver.http_onchip_da16xxx.root_ca})),
                        .p_client_cert =            ${module.driver.http_onchip_da16xxx.client_cert},
                        .client_cert_size =         (sizeof(${module.driver.http_onchip_da16xxx.client_cert})),
                        .p_client_private_key =     ${module.driver.http_onchip_da16xxx.private_key},
                        .private_key_size =         (sizeof(${module.driver.http_onchip_da16xxx.private_key})),
#else
                        .p_root_ca =                NULL,
                        .root_ca_size =             0,
                        .p_client_cert =            NULL,
                        .client_cert_size =         0,
                        .p_client_private_key =     NULL,
                        .private_key_size =         0,
#endif

                    };

        </declarations>

    </module>
        <developerSupport>
        <template category="function_call" display="DA16XXX On-chip Client Example" id="module.driver.http_onchip_da16xxx.http_client_example" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.http_onchip_da16xxx">
                <function id="http_onchip_client_example"/>
            </moduleRef>
            <content>
#define HTTP_ONCHIP_DA16XXX_BUFFER_SIZE    (2048)

/* User must set these values for their desired Wi-Fi AP */
#define WIFI_SSID                          "your_ssid"
#define WIFI_PWD                           "your_password"

/* Change the endpoint to the desired HTTP server */
http_onchip_da16xxx_request_t test_req =
{
    .p_http_endpoint = "http://httpbin.org/get",
    .method          = HTTP_ONCHIP_DA16XXX_GET,
    .p_request_body  = NULL,
    .length          = 0
};

char test_request[HTTP_ONCHIP_DA16XXX_BUFFER_SIZE];
char test_response[HTTP_ONCHIP_DA16XXX_BUFFER_SIZE];

http_onchip_da16xxx_buffer_t user_buf =
{
    .p_request_buffer  = test_request,
    .req_length        = sizeof(test_request),
    .p_response_buffer = test_response,
    .resp_length       = sizeof(test_response),
};

http_onchip_da16xxx_instance_ctrl_t g_rm_http_onchip_da16xxx_instance;

void http_onchip_basic_example(void);

void http_onchip_basic_example (void)
{
/* HTTP Example using DA16xxx on-chip HTTP Client
 * NOTE: User must provide a valid Wi-Fi AP to connect to using the macros above when calling this function
 * NOTE: User must connect to a valid HTTP server
 */

    WIFIReturnCode_t wifi_err;
    fsp_err_t        http_err;

    /* Setup Access Point connection parameters */
    WIFINetworkParams_t net_params =
    {
        .ucChannel                  = 0,
        .xPassword.xWPA.cPassphrase = WIFI_PWD,
        .ucSSID                     = WIFI_SSID,
        .xPassword.xWPA.ucLength = sizeof(WIFI_PWD),
        .ucSSIDLength            = sizeof(WIFI_SSID),
        .xSecurity               = eWiFiSecurityWPA2,
    };

    /* Open connection to the Wifi Module */
    wifi_err = WIFI_On();
    assert(eWiFiSuccess == wifi_err);

    /* Connect to the Access Point */
    wifi_err = WIFI_ConnectAP(&amp;net_params);
    assert(eWiFiSuccess == wifi_err);

    /* Initialize the HTTP Client connection */
    http_err = RM_HTTP_DA16XXX_Open(&amp;g_rm_http_onchip_da16xxx_instance, &amp;g_http_onchip_da16xxx_cfg);
    assert(FSP_SUCCESS == http_err);

    /* Initialize the HTTP Client connection */
    http_err = RM_HTTP_DA16XXX_Send(&amp;g_rm_http_onchip_da16xxx_instance, &amp;test_req, &amp;user_buf);
    assert(FSP_SUCCESS == http_err);

    /* Close the HTTP Client module */
    http_err = RM_HTTP_DA16XXX_Close(&amp;g_rm_http_onchip_da16xxx_instance);
    assert(FSP_SUCCESS == http_err);
}
            </content>
        </template>
    </developerSupport>

</raModuleDescription>



