<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.driver.cgc" path="fsp_cfg/r_cgc_cfg.h" version="0">
        <property default="config.driver.cgc.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.cgc.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.cgc.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.cgc.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.cgc.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>
#ifdef __cplusplus
extern "C" {
#endif

#define CGC_CFG_PARAM_CHECKING_ENABLE ${config.driver.cgc.param_checking_enable}
#define CGC_CFG_USE_LOW_VOLTAGE_MODE ${config.driver.cgc.low_voltage_mode}

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.driver.cgc" display="System|${module.driver.cgc.name} Clock Generation Circuit (r_cgc)" id="module.driver.cgc_on_cgc" common="1" version="1" url="group___c_g_c.html">
        <constraint display="At least one oscillation stop detection should be enabled">
            ("${module.driver.cgc.ostd_system_clock_enabled}" === "module.driver.cgc.ostd_system_clock_enabled.true") ||
            ("${module.driver.cgc.SOSTD}" === "module.driver.cgc.SOSTD.true") ||
            ("${module.driver.cgc.MOSTD}" === "module.driver.cgc.MOSTD.true")
        </constraint>
        <constraint display="Clock Switch can only be enabled if Oscillation Stop Detection for SDADCCLK is enabled">
            ("${module.driver.cgc.OSTDCSE}" === "module.driver.cgc.OSTDCSE.false") ||
            (("${module.driver.cgc.OSTDCSE}" === "module.driver.cgc.OSTDCSE.true") &amp;&amp;
            (("${module.driver.cgc.SOSTD}" === "module.driver.cgc.SOSTD.true") ||
            ("${module.driver.cgc.MOSTD}" === "module.driver.cgc.MOSTD.true")))
        </constraint>
        <constraint display="Sub clock oscillation stop detection time should be in range 5 ~ 4096 cycles">
            ("${module.driver.cgc.SOSTD}" === "module.driver.cgc.SOSTD.false") ||
            (("${module.driver.cgc.SOSTD}" === "module.driver.cgc.SOSTD.true") &amp;&amp;
            (testInteger("${module.driver.cgc.SOSTD.OSDCCMP}")) &amp;&amp;
            ("${module.driver.cgc.SOSTD.OSDCCMP}" &gt;= 5) &amp;&amp;
            ("${module.driver.cgc.SOSTD.OSDCCMP}" &lt;= 4096))
        </constraint>
        <constraint display="Main oscillation stop detection time should be in range 5 ~ 4096 cycles and the minimum setting value is HOCO frequency / MOSC frequency + 3 cycles">
            ("${module.driver.cgc.MOSTD}" === "module.driver.cgc.MOSTD.false") ||
            (("${module.driver.cgc.MOSTD}" === "module.driver.cgc.MOSTD.true") &amp;&amp;
            (testInteger("${module.driver.cgc.MOSTD.OSDCCMP}")) &amp;&amp;
            ("${module.driver.cgc.MOSTD.OSDCCMP}" &gt;= 5) &amp;&amp;
            ("${module.driver.cgc.MOSTD.OSDCCMP}" &lt;= 4096) &amp;&amp;
            ("${module.driver.cgc.MOSTD.OSDCCMP}" &gt;= ((Number("${board.clock.peripheral.cgc.hoco}") / ${board.clock.peripheral.cgc.mosc}) + 3)))
        </constraint>
        <provides interface="interface.driver.cgc" />
        <property default="g_cgc${_instance}" display="Name" id="module.driver.cgc.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.cgc.name}")</constraint>
        </property>
        <property default="module.driver.cgc.ostd_system_clock_enabled.true" display="Enable main oscillator stop detection via the NMI interrupt" id="module.driver.cgc.ostd_system_clock_enabled" description="Oscillation Stop Detection for System Clock enabled.">
            <option display="Enabled" id="module.driver.cgc.ostd_system_clock_enabled.true" value="(1)"/>
            <option display="Disabled" id="module.driver.cgc.ostd_system_clock_enabled.false" value="(0)"/>
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
        </property>
        <property display="Oscillation Stop Detection Callback" id="module.driver.cgc.callback" default="NULL" description="A user callback function must be provided if oscillation stop detection for System Clock/Main Oscillation/Sub Clock Oscillation is used. If this callback function is provided, it is called from the NMI handler if the main oscillator stops.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.cgc.callback}")</constraint>
        </property>
        <property default="module.driver.cgc.SOSTD.false" display="Sub Clock Oscillation Stop Detection Settings|Enable sub clock oscillator stop detection via the SOSC_STOP interrupt" id="module.driver.cgc.SOSTD" description="Oscillation Stop Detection for Sub Clock enabled.">
            <option display="Enabled" id="module.driver.cgc.SOSTD.true" value="(1)"/>
            <option display="Disabled" id="module.driver.cgc.SOSTD.false" value="(0)"/>
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
        </property>
        <property default="0" display="Sub Clock Oscillation Stop Detection Settings|Sub Clock Oscillation Stop Detection Time" id="module.driver.cgc.SOSTD.OSDCCMP" description="These bits specify the oscillation stop detection time. It is detected that oscillation has stopped when oscillation has been stopped for (A-2) to (A+1) clock cycles, where A refers to the time specified by these bits. Oscillation stop detection time = Low-speed on-chip oscillator clock (LOCO) cycle x ((value of OSDCCMP) + 1).">
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
        </property>
        <property default="" display="Sub Clock Oscillation Stop Detection Settings|Sub Clock Oscillation Stop Detection Interrupt Priority" id="module.driver.cgc.sostd_ipl" description="[Optional] Select the interrupt priority for the Sub Clock Oscillation Stop Detection interrupt.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
            <interrupt event="event.fixed.cgc.sostd" isr="cgc_sostd_isr"/>
        </property>
        <property default="module.driver.cgc.MOSTD.false" display="Main Oscillation Stop Detection Settings|Enable main clock oscillator stop detection via the MOSC_STOP interrupt" id="module.driver.cgc.MOSTD" description="Oscillation Stop Detection for Main Clock enabled.">
            <option display="Enabled" id="module.driver.cgc.MOSTD.true" value="(1)"/>
            <option display="Disabled" id="module.driver.cgc.MOSTD.false" value="(0)"/>
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
        </property>
        <property default="0" display="Main Oscillation Stop Detection Settings|Main Oscillation Stop Detection Time" id="module.driver.cgc.MOSTD.OSDCCMP" description="These bits specify the oscillation stop detection time. It is detected that oscillation has stopped when oscillation has been stopped for (A - 2) to (A + 1) clock cycles, where A refers to the time specified by these bits. Oscillation stop detection time = High speed on-chip oscillator clock (HOCO) cycle x ((value of OSDCCMP) + 1).">
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
        </property>
        <property default="" display="Main Oscillation Stop Detection Settings|Main Oscillation Stop Detection Interrupt Priority" id="module.driver.cgc.mostd_ipl" description="[Optional] Select the interrupt priority for the Main Oscillation Stop Detection interrupt.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
            <interrupt event="event.fixed.cgc.mostd" isr="cgc_mostd_isr"/>
        </property>
        <property default="module.driver.cgc.OSTDCSE.false" display="Oscillator Stop Detection Settings|Clock Switch Enable for Oscillation Stop Detected of SDADCCLK" id="module.driver.cgc.OSTDCSE" description="The OSTDCSE bit specifies the source clock of the 24-bit Sigma-delta A/D Converter Clock switched to HOCO when oscillation stop detected.">
            <option display="Enabled" id="module.driver.cgc.OSTDCSE.true" value="(1)"/>
            <option display="Disabled" id="module.driver.cgc.OSTDCSE.false" value="(0)"/>
            <requires interface="interface.mcu.cgc.oscillation_stop_detect.ostdcse"/>
        </property>
        <peripheral name="" component="cgc0" />
        <!-- For MCU's whose pinmapping files have been generated with MPC Designer Tool -->
        <peripheral name="" component="cgc" />
        <symbol id="symbol.driver.cgc.name" value="${module.driver.cgc.name}"/>
        <symbol id="symbol.driver.cgc.guard.open" value="${module.driver.cgc.name}_open_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.open" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_Open"/>
        <symbol id="symbol.driver.cgc.guard.clocks_cfg" value="${module.driver.cgc.name}_clocks_cfg_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.clocks_cfg" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClocksCfg"/>
        <symbol id="symbol.driver.cgc.guard.clock_start" value="${module.driver.cgc.name}_clock_start_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.clock_start" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClockStart"/>
        <symbol id="symbol.driver.cgc.guard.clock_stop" value="${module.driver.cgc.name}_clock_stop_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.clock_stop" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClockStop"/>
        <symbol id="symbol.driver.cgc.guard.clock_check" value="${module.driver.cgc.name}_clock_check_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.clock_check" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClockCheck"/>
        <symbol id="symbol.driver.cgc.guard.system_clock_set" value="${module.driver.cgc.name}_system_clock_set_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.system_clock_set" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_SystemClockSet"/>
        <symbol id="symbol.driver.cgc.guard.system_clock_get" value="${module.driver.cgc.name}_system_clock_get_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.system_clock_get" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_SystemClockGet"/>
        <symbol id="symbol.driver.cgc.guard.osc_stop_detect_enable" value="${module.driver.cgc.name}_osc_stop_detect_enable_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.osc_stop_detect_enable" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_OscStopDetectEnable"/>
        <symbol id="symbol.driver.cgc.guard.osc_stop_detect_disable" value="${module.driver.cgc.name}_osc_stop_detect_disable_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.osc_stop_detect_disable" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_OscStopDetectDisable"/>
        <symbol id="symbol.driver.cgc.guard.osc_stop_status_clear" value="${module.driver.cgc.name}_osc_stop_status_clear_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.osc_stop_status_clear" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_OscStopStatusClear"/>
        <symbol id="symbol.driver.cgc.guard.callback_set" value="${module.driver.cgc.name}_callback_set_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.callback_set" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_CallbackSet"/>
        <symbol id="symbol.driver.cgc.guard.close" value="${module.driver.cgc.name}_close_guard"/>
        <symbol id="symbol.driver.cgc.guard.macro.close" value="FSP_GUARD_${module.driver.cgc.name}_R_CGC_Close"/>
        <symbol id="symbol.driver.cgc.nsc_api" value="${module.driver.cgc.name}_nsc_api"/>
        <symbol id="symbol.driver.cgc.cfg" value="${module.driver.cgc.name}_cfg"/>
        <symbol id="symbol.driver.cgc.ctrl" value="${module.driver.cgc.name}_ctrl"/>
        <header>
/** CGC Instance */
extern const cgc_instance_t ${module.driver.cgc.name};

/** Access the CGC instance using these structures when calling API functions directly (::p_api is not used). */
extern cgc_instance_ctrl_t ${module.driver.cgc.name}_ctrl;
extern const cgc_cfg_t ${module.driver.cgc.name}_cfg;

#ifndef ${module.driver.cgc.callback}
void ${module.driver.cgc.callback}(cgc_callback_args_t * p_args);
#endif
        </header>
        <includes>
#include &quot;r_cgc.h&quot;
#include &quot;r_cgc_api.h&quot;
        </includes>
        <declarations>

#if BSP_FEATURE_CGC_HAS_OSTDCSE
const cgc_extended_cfg_t ${module.driver.cgc.name}_cfg_extend =
{
    .ostd_enable = ${module.driver.cgc.ostd_system_clock_enabled},
    .mostd_enable = ${module.driver.cgc.MOSTD},
    .sostd_enable = ${module.driver.cgc.SOSTD},
#if defined(VECTOR_NUMBER_CGC_MOSTD_STOP)
    .mostd_irq            = VECTOR_NUMBER_CGC_MOSTD_STOP,
#else
    .mostd_irq            = FSP_INVALID_VECTOR,
#endif
    .mostd_ipl            = ${module.driver.cgc.mostd_ipl},
#if defined(VECTOR_NUMBER_CGC_SOSC_STOP)
    .sostd_irq            = VECTOR_NUMBER_CGC_SOSC_STOP,
#else
    .sostd_irq            = FSP_INVALID_VECTOR,
#endif
    .sostd_ipl            = ${module.driver.cgc.sostd_ipl},
    .sdadc_b_clock_switch_enable = ${module.driver.cgc.OSTDCSE},
    .mostd_detection_time = ${module.driver.cgc.MOSTD.OSDCCMP},
    .sostd_detection_time = ${module.driver.cgc.SOSTD.OSDCCMP},
};
#endif

#if BSP_TZ_NONSECURE_BUILD
 #if defined(BSP_CFG_CLOCKS_SECURE) &amp;&amp; BSP_CFG_CLOCKS_SECURE
  #error "The CGC registers are only accessible in the TrustZone Secure Project."
 #endif
#endif

const cgc_cfg_t ${module.driver.cgc.name}_cfg =
{
    .p_callback = ${module.driver.cgc.callback},
#if BSP_FEATURE_CGC_HAS_OSTDCSE
    .p_extend   = &amp;${module.driver.cgc.name}_cfg_extend,
#else
    .p_extend   = NULL,
#endif
};

cgc_instance_ctrl_t ${module.driver.cgc.name}_ctrl;
const cgc_instance_t ${module.driver.cgc.name} = {
    .p_api = &amp;g_cgc_on_cgc,
    .p_ctrl        = &amp;${module.driver.cgc.name}_ctrl,
    .p_cfg         = &amp;${module.driver.cgc.name}_cfg,
};
        </declarations>
        <guard>
            <header>

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_open_guard(cgc_ctrl_t *const p_ctrl, cgc_cfg_t const *const p_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clocks_cfg_guard(cgc_ctrl_t *const p_ctrl, cgc_clocks_cfg_t const *const p_clock_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_start_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source, cgc_pll_cfg_t const *const p_pll_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_stop_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_check_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_system_clock_set_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source, cgc_divider_cfg_t const *const p_divider_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_system_clock_get_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t *const p_clock_source, cgc_divider_cfg_t *const p_divider_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_detect_enable_guard(cgc_ctrl_t *const p_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_detect_disable_guard(cgc_ctrl_t *const p_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_status_clear_guard(cgc_ctrl_t *const p_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_callback_set_guard(cgc_ctrl_t *const p_api_ctrl, void(*p_callback)(cgc_callback_args_t *), void const *const p_context, cgc_callback_args_t *const p_callback_memory);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_close_guard(cgc_ctrl_t *const p_ctrl);

            </header>
            <template name="${module.driver.cgc.name}_guard.c">
                <![CDATA[
                    #include "guard.h"


BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_open_guard (cgc_ctrl_t *const p_ctrl, cgc_cfg_t const *const p_cfg)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);
    FSP_PARAMETER_NOT_USED(p_cfg);

    return R_CGC_Open(&${module.driver.cgc.name}_ctrl, &${module.driver.cgc.name}_cfg);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clocks_cfg_guard (cgc_ctrl_t *const p_ctrl, cgc_clocks_cfg_t const *const p_clock_cfg)
{
    /* Verify all pointers are in non-secure memory. */
    cgc_clocks_cfg_t const *const p_clock_cfg_checked = cmse_check_pointed_object((cgc_clocks_cfg_t *) p_clock_cfg, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_clock_cfg_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_ClocksCfg(&${module.driver.cgc.name}_ctrl, p_clock_cfg_checked);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_start_guard (cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source, cgc_pll_cfg_t const *const p_pll_cfg)
{
    /* Verify all pointers are in non-secure memory. */
    cgc_pll_cfg_t const *const p_pll_cfg_checked = cmse_check_pointed_object((cgc_pll_cfg_t *) p_pll_cfg, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_pll_cfg == p_pll_cfg_checked);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_ClockStart(&${module.driver.cgc.name}_ctrl, clock_source, p_pll_cfg_checked);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_stop_guard (cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_ClockStop(&${module.driver.cgc.name}_ctrl, clock_source);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_check_guard (cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_ClockCheck(&${module.driver.cgc.name}_ctrl, clock_source);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_system_clock_set_guard (cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source, cgc_divider_cfg_t const *const p_divider_cfg)
{
    /* Verify all pointers are in non-secure memory. */
    cgc_divider_cfg_t const *const p_divider_cfg_checked = cmse_check_pointed_object((cgc_divider_cfg_t *) p_divider_cfg, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_divider_cfg_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_SystemClockSet(&${module.driver.cgc.name}_ctrl, clock_source, p_divider_cfg_checked);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_system_clock_get_guard (cgc_ctrl_t *const p_ctrl, cgc_clock_t *const p_clock_source, cgc_divider_cfg_t *const p_divider_cfg)
{
    /* Verify all pointers are in non-secure memory. */
    cgc_clock_t *const p_clock_source_checked = cmse_check_pointed_object(p_clock_source, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_clock_source_checked != NULL);
    cgc_divider_cfg_t *const p_divider_cfg_checked = cmse_check_pointed_object(p_divider_cfg, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_divider_cfg_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_SystemClockGet(&${module.driver.cgc.name}_ctrl, p_clock_source_checked, p_divider_cfg_checked);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_detect_enable_guard (cgc_ctrl_t *const p_ctrl)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_OscStopDetectEnable(&${module.driver.cgc.name}_ctrl);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_detect_disable_guard (cgc_ctrl_t *const p_ctrl)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_OscStopDetectDisable(&${module.driver.cgc.name}_ctrl);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_status_clear_guard (cgc_ctrl_t *const p_ctrl)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_OscStopStatusClear(&${module.driver.cgc.name}_ctrl);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_callback_set_guard (cgc_ctrl_t *const p_api_ctrl, void(*p_callback)(cgc_callback_args_t *), void const *const p_context, cgc_callback_args_t *const p_callback_memory)
{
    /* Verify all pointers are in non-secure memory. */
    void(*p_callback_checked)(cgc_callback_args_t *) = (void(*)(cgc_callback_args_t *)) cmse_check_address_range((void *) p_callback, sizeof(void *), CMSE_AU_NONSECURE);
    FSP_ASSERT(p_callback_checked != NULL);
    cgc_callback_args_t *const p_callback_memory_checked = cmse_check_pointed_object(p_callback_memory, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_callback_memory_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);
    FSP_PARAMETER_NOT_USED(p_context);

    return R_CGC_CallbackSet(&${module.driver.cgc.name}_ctrl, p_callback_checked, p_context, p_callback_memory_checked);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_close_guard (cgc_ctrl_t *const p_ctrl)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_ctrl);

    return R_CGC_Close(&${module.driver.cgc.name}_ctrl);
}

                ]]>
            </template>
        </guard>
        <nsc>
            <header>

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_Open() ${module.driver.cgc.name}_open_guard(FSP_SECURE_ARGUMENT, FSP_SECURE_ARGUMENT)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClocksCfg(p_clock_cfg) ${module.driver.cgc.name}_clocks_cfg_guard(FSP_SECURE_ARGUMENT, p_clock_cfg)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClockStart(clock_source, p_pll_cfg) ${module.driver.cgc.name}_clock_start_guard(FSP_SECURE_ARGUMENT, clock_source, p_pll_cfg)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClockStop(clock_source) ${module.driver.cgc.name}_clock_stop_guard(FSP_SECURE_ARGUMENT, clock_source)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_ClockCheck(clock_source) ${module.driver.cgc.name}_clock_check_guard(FSP_SECURE_ARGUMENT, clock_source)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_SystemClockSet(clock_source, p_divider_cfg) ${module.driver.cgc.name}_system_clock_set_guard(FSP_SECURE_ARGUMENT, clock_source, p_divider_cfg)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_SystemClockGet(p_clock_source, p_divider_cfg) ${module.driver.cgc.name}_system_clock_get_guard(FSP_SECURE_ARGUMENT, p_clock_source, p_divider_cfg)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_OscStopDetectEnable() ${module.driver.cgc.name}_osc_stop_detect_enable_guard(FSP_SECURE_ARGUMENT)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_OscStopDetectDisable() ${module.driver.cgc.name}_osc_stop_detect_disable_guard(FSP_SECURE_ARGUMENT)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_OscStopStatusClear() ${module.driver.cgc.name}_osc_stop_status_clear_guard(FSP_SECURE_ARGUMENT)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_CallbackSet(p_callback, p_context, p_callback_memory) ${module.driver.cgc.name}_callback_set_guard(FSP_SECURE_ARGUMENT, p_callback, p_context, p_callback_memory)

#define FSP_GUARD_${module.driver.cgc.name}_R_CGC_Close() ${module.driver.cgc.name}_close_guard(FSP_SECURE_ARGUMENT)



BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_open_guard(cgc_ctrl_t *const p_ctrl, cgc_cfg_t const *const p_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clocks_cfg_guard(cgc_ctrl_t *const p_ctrl, cgc_clocks_cfg_t const *const p_clock_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_start_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source, cgc_pll_cfg_t const *const p_pll_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_stop_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_clock_check_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_system_clock_set_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t clock_source, cgc_divider_cfg_t const *const p_divider_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_system_clock_get_guard(cgc_ctrl_t *const p_ctrl, cgc_clock_t *const p_clock_source, cgc_divider_cfg_t *const p_divider_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_detect_enable_guard(cgc_ctrl_t *const p_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_detect_disable_guard(cgc_ctrl_t *const p_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_osc_stop_status_clear_guard(cgc_ctrl_t *const p_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_callback_set_guard(cgc_ctrl_t *const p_api_ctrl, void(*p_callback)(cgc_callback_args_t *), void const *const p_context, cgc_callback_args_t *const p_callback_memory);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.cgc.name}_close_guard(cgc_ctrl_t *const p_ctrl);


extern const cgc_instance_t ${module.driver.cgc.name};
            </header>
            <declarations>
                <![CDATA[
static const cgc_api_t ${module.driver.cgc.name}_nsc_api =
{
    .open = ${module.driver.cgc.name}_open_guard,
    .clocksCfg = ${module.driver.cgc.name}_clocks_cfg_guard,
    .clockStart = ${module.driver.cgc.name}_clock_start_guard,
    .clockStop = ${module.driver.cgc.name}_clock_stop_guard,
    .clockCheck = ${module.driver.cgc.name}_clock_check_guard,
    .systemClockSet = ${module.driver.cgc.name}_system_clock_set_guard,
    .systemClockGet = ${module.driver.cgc.name}_system_clock_get_guard,
    .oscStopDetectEnable = ${module.driver.cgc.name}_osc_stop_detect_enable_guard,
    .oscStopDetectDisable = ${module.driver.cgc.name}_osc_stop_detect_disable_guard,
    .oscStopStatusClear = ${module.driver.cgc.name}_osc_stop_status_clear_guard,
    .callbackSet = ${module.driver.cgc.name}_callback_set_guard,
    .close = ${module.driver.cgc.name}_close_guard,
};
const cgc_instance_t ${module.driver.cgc.name} =
{
    .p_api = &${module.driver.cgc.name}_nsc_api,
    .p_ctrl = FSP_SECURE_ARGUMENT,
    .p_cfg = FSP_SECURE_ARGUMENT,
};
                ]]>
            </declarations>
        </nsc>
        <api configurable="true">
            <file>ra/fsp/inc/instances/r_cgc.h</file>
            <file>ra/fsp/inc/api/r_cgc_api.h</file>
        </api>
    </module>
</raModuleDescription>