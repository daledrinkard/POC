<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.driver.fs3000" path="fsp_cfg/rm_fs3000_cfg.h" version="0">
        <property default="config.driver.fs3000.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.fs3000.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.fs3000.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.fs3000.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.fs3000.param_checking_enable.disabled" value="(0)"/>
        </property>
        <!-- First version supports FS3000-1005 only -->
        <property default="config.driver.fs3000.device_type.fs3000_1005" display="Device Type" id="config.driver.fs3000.device_type" description="Select FS3000 device used.">
            <option display="FS3000-1005" id="config.driver.fs3000.device_type.fs3000_1005" value="(0)"/>
            <!-- <option display="FS3000-1015" id="config.driver.fs3000.device_type.fs3000_1015" value="(1)"/> -->
        </property>
        <content>
#ifdef __cplusplus
extern "C" {
#endif

#define RM_FS3000_CFG_PARAM_CHECKING_ENABLE   ${config.driver.fs3000.param_checking_enable}
#define RM_FS3000_CFG_DEVICE_TYPE (${config.driver.fs3000.device_type})

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.driver.fs3000" display="Sensor|${module.driver.fs3000.name} FS3000 Flow Sensor (rm_fs3000)" id="module.driver.fsxxxx_on_fs3000" version="1" url="group___r_m___f_s3000.html">
        <constraint display="Unique name required for each instance">
            "${interface.driver.fs3000.${module.driver.fs3000.name}}" === "1"
        </constraint>
        <constraint display="FS3000 needs clock stretching, but is not supported by SAU I2C.">
            "${interface.driver.i2c_on_sau_i2c}" != "1"
        </constraint>
        <requires id="module.driver.fs3000.requires.comms_i2c_device" interface="interface.driver.comms_i2c_device" visible="true" display="Requires I2C Communications Device">
            <override property="module.driver.comms_i2c_device.slave_address" value="0x28"/>
            <override property="module.driver.comms_i2c_device.address_mode" value="I2C_MASTER_ADDR_MODE_7BIT"/>
            <override property="module.driver.comms_i2c_device.p_context" value="${module.driver.fs3000.name}_ctrl"/>
            <override property="module.driver.comms_i2c_device.p_callback" value="rm_fs3000_callback"/>
        </requires>

        <provides interface="interface.driver.fs3000" />
        <provides interface="interface.driver.fsxxxx_on_fs3000" />
        <provides interface="interface.driver.fs3000.${module.driver.fs3000.name}" />
        <property default="g_fs3000_sensor${_instance}" display="Name" id="module.driver.fs3000.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.fs3000.name}")
            </constraint>
        </property>
        <property default="NULL" id="module.driver.fs3000.p_context" />
        <property default="fs3000_callback" display="Callback" id="module.driver.fs3000.p_callback" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.fs3000.p_callback}")
            </constraint>
        </property>
        <property default="" id="module.driver.fs3000.name_upper">
            <export>"${module.driver.fs3000.name}".toUpperCase()</export>
        </property>

        <header>
/* FS3000 Sensor */
extern const rm_fsxxxx_instance_t ${module.driver.fs3000.name};
extern rm_fs3000_instance_ctrl_t ${module.driver.fs3000.name}_ctrl;
extern const rm_fsxxxx_cfg_t ${module.driver.fs3000.name}_cfg;
#ifndef ${module.driver.fs3000.p_callback}
void ${module.driver.fs3000.p_callback}(rm_fsxxxx_callback_args_t * p_args);
#endif
        </header>

        <includes>
#include &quot;rm_fs3000.h&quot;
#include &quot;rm_fsxxxx_api.h&quot;
        </includes>

        <declarations>
rm_fs3000_instance_ctrl_t ${module.driver.fs3000.name}_ctrl;

const rm_fsxxxx_cfg_t ${module.driver.fs3000.name}_cfg =
{
    .p_instance = &amp;${module.driver.fs3000.requires.comms_i2c_device::module.driver.comms_i2c_device.name},
    .p_callback = ${module.driver.fs3000.p_callback},
#if defined(${module.driver.fs3000.p_context})
    .p_context           = ${module.driver.fs3000.p_context},
#else
    .p_context           = &amp;${module.driver.fs3000.p_context},
#endif
};

const rm_fsxxxx_instance_t ${module.driver.fs3000.name} =
{
    .p_ctrl = &amp;${module.driver.fs3000.name}_ctrl,
    .p_cfg  = &amp;${module.driver.fs3000.name}_cfg,
    .p_api  = &amp;g_fsxxxx_on_fs3000,
};
        </declarations>
    </module>

    <!-- Developer Assistance -->
    <developerSupport>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.fsxxxx_on_fs3000"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>FS3000 provides snippets of code for operating the FS3000 Middleware.</p></form>]]></description>
            <function display="Quick Setup" id="fs3000_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for FS3000 using the properties from the RA configurator.</p></form>]]></description>
            </function>
            <function display="Quick Getting Flow" id="fs3000_quick_getting_flow">
                <description><![CDATA[<form><p>This function provides quick getting flow values for FS3000 using the properties from the RA configurator.</p></form>]]></description>
            </function>
        </api>
        <template category="function_call" display="Call Quick Setup" id="module.driver.fs3000.quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.fsxxxx_on_fs3000">
                <function id="fs3000_quick_setup"/>
            </moduleRef>
            <content>
/* TODO: Enable if you want to open FS3000 */
#define ${fs3000_name_upper:raProperty(module.driver.fs3000.name_upper)}_NON_BLOCKING (0)

#if ${fs3000_name_upper}_NON_BLOCKING
volatile bool g_fs3000_completed = false;
#endif

/* TODO: Enable if you want to use a callback */
#define ${fs3000_name_upper}_CALLBACK_ENABLE (0)
#if ${fs3000_name_upper}_CALLBACK_ENABLE
void ${fs3000_callback:raProperty(module.driver.fs3000.p_callback)}(rm_fsxxxx_callback_args_t * p_args)
{
#if ${fs3000_name_upper}_NON_BLOCKING
    if (RM_FSXXXX_EVENT_SUCCESS == p_args->event)
    {
        g_fs3000_completed = true;
    }
#else
    FSP_PARAMETER_NOT_USED(p_args);
#endif
}
#endif

/* Delay */
#define ${fs3000_name_upper}_DELAY_125 (125)
#define ${fs3000_name_upper}_DELAY_MS  (1000)

/* Quick setup for ${fs3000_name:raProperty(module.driver.fs3000.name)}.
 * - ${i2c_bus_name:raProperty(module.driver.comms_i2c_bus.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${fs3000_name} -> ${i2c_device_name:raProperty(module.driver.comms_i2c_device.name)} -> ${i2c_bus_name} -> Quick Setup).
 */
void ${fs3000_name}_quick_setup(void);

/* Quick setup for ${fs3000_name}. */
void ${fs3000_name}_quick_setup(void)
{
    fsp_err_t err;

    /* Open FS3000 sensor instance, this must be done before calling any FSXXXX API */
    err = ${fs3000_name}.p_api->open(${fs3000_name}.p_ctrl, ${fs3000_name}.p_cfg);
    assert(FSP_SUCCESS == err);
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Getting Flow" id="module.driver.fs3000.quick_getting_flow" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.fsxxxx_on_fs3000">
                <function id="fs3000_quick_getting_flow"/>
            </moduleRef>
            <content>
/* Quick getting flow values for ${fs3000_name:raProperty(module.driver.fs3000.name)}.
 * - ${fs3000_name} must be setup before calling this function.
 */
void ${fs3000_name}_quick_getting_flow(rm_fsxxxx_data_t * p_flow);

/* Quick getting flow for ${fs3000_name}. */
void ${fs3000_name}_quick_getting_flow(rm_fsxxxx_data_t * p_flow)
{
    fsp_err_t            err;
    rm_fsxxxx_raw_data_t fs3000_raw_data;
    bool                 is_valid_data = false;

    do
    {
        /* Read ADC data from FS3000 sensor */
        err = ${fs3000_name}.p_api->read(${fs3000_name}.p_ctrl, &amp;fs3000_raw_data);
        assert(FSP_SUCCESS == err);

#if ${fs3000_name_upper:raProperty(module.driver.fs3000.name_upper)}_NON_BLOCKING
        while (!g_fs3000_completed)
        {
            ;
        }
        g_fs3000_completed = false;
#endif

        /* Calculate flow values from FS3000 ADC data */
        err = ${fs3000_name}.p_api->dataCalculate(${fs3000_name}.p_ctrl, &amp;fs3000_raw_data, p_flow);
        if (FSP_SUCCESS == err)
        {
            is_valid_data = true;
        }
        else if (FSP_ERR_SENSOR_INVALID_DATA == err)    /* Checksum error */
        {
            is_valid_data = false;
        }
        else
        {
            assert(false);
        }
    } while (false == is_valid_data);

    /* Wait 125 milliseconds. See table 4 on the page 7 of the datasheet. */
#if BSP_CFG_RTOS == 1 // AzureOS
    tx_thread_sleep(${fs3000_name_upper}_DELAY_125 * TX_TIMER_TICKS_PER_SECOND / ${fs3000_name_upper}_DELAY_MS);
#elif BSP_CFG_RTOS == 2 // FreeRTOS
    vTaskDelay(${fs3000_name_upper}_DELAY_125 * configTICK_RATE_HZ / ${fs3000_name_upper}_DELAY_MS);
#else // Bare Metal
    R_BSP_SoftwareDelay(${fs3000_name_upper}_DELAY_125, BSP_DELAY_UNITS_MILLISECONDS);
#endif
}
            </content>
        </template>
    </developerSupport>
</raModuleDescription>
