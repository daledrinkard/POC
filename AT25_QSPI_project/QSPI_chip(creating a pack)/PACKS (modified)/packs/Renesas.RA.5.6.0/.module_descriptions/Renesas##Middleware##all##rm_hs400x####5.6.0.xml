<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.driver.hs400x" path="fsp_cfg/rm_hs400x_cfg.h" version="0">
        <property default="config.driver.hs400x.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.hs400x.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.hs400x.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.hs400x.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.hs400x.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.hs400x.measurement_type.no_hold" display="Measurement Type" id="config.driver.hs400x.measurement_type" description="Select measurement type.">
            <option display="Hold Measurement" id="config.driver.hs400x.measurement_type.hold" value="(1)"/>
            <option display="No-Hold Measurement" id="config.driver.hs400x.measurement_type.no_hold" value="(2)"/>
            <option display="Periodic Measurement" id="config.driver.hs400x.measurement_type.periodic" value="(3)"/>
        </property>
        <property default="config.driver.hs400x.sensor_data.both_humidity_temperature" display="Data type" id="config.driver.hs400x.sensor_data" description="Select getting temperature only or both humidity and temperature.">
            <option display="Both humidity and temperature" id="config.driver.hs400x.sensor_data.both_humidity_temperature" value="(1)"/>
            <option display="Temperature only" id="config.driver.hs400x.sensor_data.temperature_only" value="(0)"/>
        </property>
        <content>
            #ifdef __cplusplus
            extern "C" {
            #endif

            #define RM_HS400X_CFG_PARAM_CHECKING_ENABLE   ${config.driver.hs400x.param_checking_enable}
            #define RM_HS400X_CFG_MEASUREMENT_TYPE ${config.driver.hs400x.measurement_type}
            #define RM_HS400X_CFG_DATA_BOTH_HUMIDITY_TEMPERATURE ${config.driver.hs400x.sensor_data}

            #ifdef __cplusplus
            }
            #endif
        </content>
    </config>
    <module config="config.driver.hs400x" display="Sensor|${module.driver.hs400x.name} HS400X Temperature/Humidity Sensor (rm_hs400x)" id="module.driver.hs400x_on_hs400x" version="1" url="group___r_m___h_s400_x.html">
        <constraint display="Unique name required for each instance">
            "${interface.driver.hs400x.${module.driver.hs400x.name}}" === "1"
        </constraint>
        <constraint display="Periodic measurement only supports getting both humidity and temperature data.">
            ("${config.driver.hs400x.measurement_type}" != "config.driver.hs400x.measurement_type.periodic") ||
            ("${config.driver.hs400x.sensor_data}" === "config.driver.hs400x.sensor_data.both_humidity_temperature")
        </constraint>
        <constraint display="Hold measurement needs clock stretching, but is not supported by SAU I2C.">
            ("${interface.driver.i2c_on_sau_i2c}" != "1") || ("${config.driver.hs400x.measurement_type}" != "config.driver.hs400x.measurement_type.hold")
        </constraint>
        <requires id="module.driver.hs400x.requires.comms_i2c_device" interface="interface.driver.comms_i2c_device" visible="true" display="Requires I2C Communications Device">
            <override property="module.driver.comms_i2c_device.slave_address" value="0x54"/>
            <override property="module.driver.comms_i2c_device.address_mode" value="I2C_MASTER_ADDR_MODE_7BIT"/>
            <override property="module.driver.comms_i2c_device.p_context" value="${module.driver.hs400x.name}_ctrl"/>
            <override property="module.driver.comms_i2c_device.p_callback" value="rm_hs400x_comms_i2c_callback"/>
        </requires>

        <provides interface="interface.driver.hs400x" />
        <provides interface="interface.driver.hs400x_on_hs400x" />
        <provides interface="interface.driver.hs400x.${module.driver.hs400x.name}" />
        <property default="g_hs400x_sensor${_instance}" display="Name" id="module.driver.hs400x.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.hs400x.name}")</constraint>
        </property>
        <property default="module.driver.hs400x.temperature_resolution.14bit" display="Temperature Resolution" id="module.driver.hs400x.temperature_resolution" description="Set resolution of temperature.">
            <option display="8-bit" id="module.driver.hs400x.temperature_resolution.8bit" value="RM_HS400X_TEMPERATURE_RESOLUTION_8BIT"/>
            <option display="10-bit" id="module.driver.hs400x.temperature_resolution.10bit" value="RM_HS400X_TEMPERATURE_RESOLUTION_10BIT"/>
            <option display="12-bit" id="module.driver.hs400x.temperature_resolution.12bit" value="RM_HS400X_TEMPERATURE_RESOLUTION_12BIT"/>
            <option display="14-bit" id="module.driver.hs400x.temperature_resolution.14bit" value="RM_HS400X_TEMPERATURE_RESOLUTION_14BIT"/>
        </property>
        <property default="module.driver.hs400x.humidity_resolution.14bit" display="Humidity Resolution" id="module.driver.hs400x.humidity_resolution" description="Set resolution of humidity.">
            <option display="8-bit" id="module.driver.hs400x.humidity_resolution.8bit" value="RM_HS400X_HUMIDITY_RESOLUTION_8BIT"/>
            <option display="10-bit" id="module.driver.hs400x.humidity_resolution.10bit" value="RM_HS400X_HUMIDITY_RESOLUTION_10BIT"/>
            <option display="12-bit" id="module.driver.hs400x.humidity_resolution.12bit" value="RM_HS400X_HUMIDITY_RESOLUTION_12BIT"/>
            <option display="14-bit" id="module.driver.hs400x.humidity_resolution.14bit" value="RM_HS400X_HUMIDITY_RESOLUTION_14BIT"/>
        </property>
        <property default="module.driver.hs400x.frequency.1hz" display="Frequency for Periodic Measurement" id="module.driver.hs400x.frequency" description="Set frequency for periodic measurement.">
            <option display="0.4Hz" id="module.driver.hs400x.frequency.0p4hz" value="RM_HS400X_PERIODIC_MEASUREMENT_FREQUENCY_0P4HZ"/>
            <option display="1Hz" id="module.driver.hs400x.frequency.1hz" value="RM_HS400X_PERIODIC_MEASUREMENT_FREQUENCY_1HZ"/>
            <option display="2Hz" id="module.driver.hs400x.frequency.2hz" value="RM_HS400X_PERIODIC_MEASUREMENT_FREQUENCY_2HZ"/>
        </property>

        <property default="NULL" id="module.driver.hs400x.p_context" />
        <property default="hs400x_comms_i2c_callback" display="Comms I2C Callback" id="module.driver.hs400x.p_callback" description="A user COMMS I2C callback function can be provided.">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.hs400x.p_callback}")
            </constraint>
        </property>
        <property default="" id="module.driver.hs400x.name_upper">
            <export>"${module.driver.hs400x.name}".toUpperCase()</export>
        </property>

        <header>
/* HS400X Sensor */
extern const rm_hs400x_instance_t ${module.driver.hs400x.name};
extern rm_hs400x_instance_ctrl_t ${module.driver.hs400x.name}_ctrl;
extern const rm_hs400x_cfg_t ${module.driver.hs400x.name}_cfg;
#ifndef ${module.driver.hs400x.p_callback}
void ${module.driver.hs400x.p_callback}(rm_hs400x_callback_args_t * p_args);
#endif
        </header>

        <includes>
#include &quot;rm_hs400x.h&quot;
#include &quot;rm_hs400x_api.h&quot;
        </includes>

        <declarations>
rm_hs400x_instance_ctrl_t ${module.driver.hs400x.name}_ctrl;
const rm_hs400x_cfg_t ${module.driver.hs400x.name}_cfg =
{
    .p_comms_instance = &amp;${module.driver.hs400x.requires.comms_i2c_device::module.driver.comms_i2c_device.name},
    .temperature_resolution = ${module.driver.hs400x.temperature_resolution},
    .humidity_resolution = ${module.driver.hs400x.humidity_resolution},
#if 3 == RM_HS400X_CFG_MEASUREMENT_TYPE // Periodic Measurement
    .frequency = ${module.driver.hs400x.frequency},
#endif
    .p_comms_callback = ${module.driver.hs400x.p_callback},
#if defined(${module.driver.hs400x.p_context})
    .p_context           = ${module.driver.hs400x.p_context},
#else
    .p_context           = &amp;${module.driver.hs400x.p_context},
#endif
};

const rm_hs400x_instance_t ${module.driver.hs400x.name} =
{
    .p_ctrl = &amp;${module.driver.hs400x.name}_ctrl,
    .p_cfg  = &amp;${module.driver.hs400x.name}_cfg,
    .p_api  = &amp;g_hs400x_on_hs400x,
};
        </declarations>
    </module>

    <!-- Developer Assistance -->
    <developerSupport>
        <api version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.hs400x_on_hs400x"/>
            <description><![CDATA[<form><p><span color="header" font="header">Overview</span></p><p>HS400X provides snippets of code for operating the HS400X Middleware.</p></form>]]></description>
            <function display="Quick Setup" id="hs400x_quick_setup">
                <description><![CDATA[<form><p>This function provides quick setup for HS400X using the properties from the RA configurator.</p></form>]]></description>
            </function>
            <function display="Quick Getting Humidity and Temperature" id="hs400x_quick_getting_humidity_and_temperature">
                <description><![CDATA[<form><p>This function provides quick getting humidity and temperature values for HS400X in hold measurement using the properties from the RA configurator.</p></form>]]></description>
            </function>
        </api>
        <template category="function_call" display="Call Quick Setup" id="module.driver.hs400x.quick_setup" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.hs400x_on_hs400x">
                <function id="hs400x_quick_setup"/>
            </moduleRef>
            <content>
/* TODO: Enable if you want to open HS400X */
#define ${hs400x_name_upper:raProperty(module.driver.hs400x.name_upper)}_NON_BLOCKING (0)

#if ${hs400x_name_upper}_NON_BLOCKING
volatile bool g_hs400x_completed = false;
volatile rm_hs400x_event_t g_hs400x_event = RM_HS400X_EVENT_ERROR;
#endif

/* TODO: Enable if you want to use a callback */
#define ${hs400x_name_upper}_CALLBACK_ENABLE (0)
#if ${hs400x_name_upper}_CALLBACK_ENABLE
void ${hs400x_callback:raProperty(module.driver.hs400x.p_callback)}(rm_hs400x_callback_args_t * p_args)
{
#if ${hs400x_name_upper}_NON_BLOCKING
    if (RM_HS400X_EVENT_ERROR != p_args->event)
    {
        g_hs400x_completed = true;
        g_hs400x_event = p_args->event;
    }
#else
    FSP_PARAMETER_NOT_USED(p_args);
#endif
}
#endif

/* Delay */
#define ${hs400x_name_upper}_DELAY_500  (500)
#define ${hs400x_name_upper}_DELAY_1000 (1000)
#define ${hs400x_name_upper}_DELAY_2500 (2500)
#define ${hs400x_name_upper}_DELAY_MS   (1000)

/* Quick setup for ${hs400x_name:raProperty(module.driver.hs400x.name)}.
 * - ${i2c_bus_name:raProperty(module.driver.comms_i2c_bus.name)} must be setup before calling this function
 *     (See Developer Assistance -> ${hs400x_name} -> ${i2c_device_name:raProperty(module.driver.comms_i2c_device.name)} -> ${i2c_bus_name} -> Quick Setup).
 */
void ${hs400x_name}_quick_setup(void);

/* Quick setup for ${hs400x_name}. */
void ${hs400x_name}_quick_setup(void)
{
    fsp_err_t err;

    /* Open HS400X sensor instance, this must be done before calling any HS400X API */
    err = ${hs400x_name}.p_api->open(${hs400x_name}.p_ctrl, ${hs400x_name}.p_cfg);
    assert(FSP_SUCCESS == err);

#if 3 == RM_HS400X_CFG_MEASUREMENT_TYPE // Periodic Measurement
    /* Start a periodic measurement */
    err = ${hs400x_name}.p_api->measurementStart(${hs400x_name}.p_ctrl);
    assert(FSP_SUCCESS == err);
#if ${hs400x_name_upper:raProperty(module.driver.hs400x.name_upper)}_NON_BLOCKING
    while (!g_hs400x_completed)
    {
        ;
    }
    g_hs400x_completed = false;
#endif
#endif
}
            </content>
        </template>
        <template category="function_call" display="Call Quick Getting Humidity and Temperature" id="module.driver.hs400x.quick_getting_humidity_and_temperature" version="1">
            <platform id="fsp" max="" min="1.1.0"/>
            <moduleRef id="module.driver.hs400x_on_hs400x">
                <function id="hs400x_quick_getting_humidity_and_temperature"/>
            </moduleRef>
            <content>
/* Quick getting humidity and temperature values for ${hs400x_name:raProperty(module.driver.hs400x.name)}.
 * - ${hs400x_name} must be setup before calling this function.
 */
void ${hs400x_name}_quick_getting_humidity_and_temperature(rm_hs400x_data_t * p_data);

/* Quick getting humidity and temperature for ${hs400x_name}. */
void ${hs400x_name}_quick_getting_humidity_and_temperature(rm_hs400x_data_t * p_data)
{
    fsp_err_t            err;
    rm_hs400x_raw_data_t hs400x_raw_data;
    bool is_valid_data = false;
#if ${hs400x_name_upper:raProperty(module.driver.hs400x.name_upper)}_NON_BLOCKING
    bool is_complete = false;
#endif
    uint32_t             delay_time;

#if 2 == RM_HS400X_CFG_MEASUREMENT_TYPE // No-Hold Measurement
    /* Start a measurement */
    err = ${hs400x_name}.p_api->measurementStart(${hs400x_name}.p_ctrl);
    assert(FSP_SUCCESS == err);
#if ${hs400x_name_upper}_NON_BLOCKING
    while (!g_hs400x_completed)
    {
        ;
    }
    g_hs400x_completed = false;
#endif
#endif

#if 3 == RM_HS400X_CFG_MEASUREMENT_TYPE // Periodic Measurement
    /* Wait for frequency for Periodic measurement. See table 9 on the page 16 of the datasheet. */
    switch (${hs400x_name}_cfg.frequency)
    {
        case RM_HS400X_PERIODIC_MEASUREMENT_FREQUENCY_2HZ :
            delay_time = ${hs400x_name_upper}_DELAY_500;
            break;
        case RM_HS400X_PERIODIC_MEASUREMENT_FREQUENCY_1HZ :
            delay_time = ${hs400x_name_upper}_DELAY_1000;
            break;
        case RM_HS400X_PERIODIC_MEASUREMENT_FREQUENCY_0P4HZ :
            delay_time = ${hs400x_name_upper}_DELAY_2500;
            break;
        default :
            assert(false);
            break;
    }
#if BSP_CFG_RTOS == 1 // AzureOS
    tx_thread_sleep(delay_time * TX_TIMER_TICKS_PER_SECOND / ${hs400x_name_upper}_DELAY_MS);
#elif BSP_CFG_RTOS == 2 // FreeRTOS
    vTaskDelay(delay_time * configTICK_RATE_HZ / ${hs400x_name_upper}_DELAY_MS);
#else // Bare Metal
    R_BSP_SoftwareDelay(delay_time, BSP_DELAY_UNITS_MILLISECONDS);
#endif
#endif

    do
    {
#if ${hs400x_name_upper}_NON_BLOCKING
        do
        {
#endif
            /* In Hold measurement, start a measurement and read ADC data from HS400X sensor */
            /* In other measurements, read ADC data from HS400X sensor */
            err = ${hs400x_name}.p_api->read(${hs400x_name}.p_ctrl, &amp;hs400x_raw_data);
            assert(FSP_SUCCESS == err);
#if ${hs400x_name_upper}_NON_BLOCKING
            while (!g_hs400x_completed)
            {
                ;
            }
            g_hs400x_completed = false;
#if 2 == RM_HS400X_CFG_MEASUREMENT_TYPE // No-Hold Measurement
            if (RM_HS400X_EVENT_MEASUREMENT_NOT_COMPLETE == g_hs400x_event)
            {
                /* RM_HS400X_EVENT_MEASUREMENT_NOT_COMPLETE is received */
                is_complete = false;
            }
            else
            {
                /* RM_HS400X_EVENT_SUCCESS is received */
                is_complete = true;
            }
#else
            is_complete = true;
#endif
        }
        while (false == is_complete);
#endif

        /* Calculate humidity and temperature values from ADC data */
        err = ${hs400x_name}.p_api->dataCalculate(${hs400x_name}.p_ctrl, &amp;hs400x_raw_data, p_data);
        if (FSP_SUCCESS == err)
        {
            is_valid_data = true;
        }
        else if (FSP_ERR_SENSOR_INVALID_DATA == err)
        {
            is_valid_data = false;
        }
        else
        {
            assert(false);
        }
    }
    while (false == is_valid_data);
}
            </content>
        </template>
    </developerSupport>
</raModuleDescription>
