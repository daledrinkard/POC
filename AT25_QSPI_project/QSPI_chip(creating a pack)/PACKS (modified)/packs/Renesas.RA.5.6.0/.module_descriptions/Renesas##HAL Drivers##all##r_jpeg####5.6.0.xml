<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.driver.jpeg" path="fsp_cfg/r_jpeg_cfg.h" version="0">
        <property default="config.driver.jpeg.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.jpeg.param_checking_enable" description="If selected, code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.jpeg.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.jpeg.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.jpeg.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.jpeg.decode_enable.enabled" display="Decode Support" id="config.driver.jpeg.decode_enable" description="If selected, code for decoding JPEG images is included in the build.">
            <option display="Enabled" id="config.driver.jpeg.decode_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.jpeg.decode_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.jpeg.encode_enable.disabled" display="Encode Support" id="config.driver.jpeg.encode_enable" description="If selected, code for encoding JPEG images is included in the build.">
            <option display="Enabled" id="config.driver.jpeg.encode_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.jpeg.encode_enable.disabled" value="(0)"/>
        </property>
        <content>
            #ifdef __cplusplus
            extern "C" {
            #endif

            #define JPEG_CFG_PARAM_CHECKING_ENABLE ${config.driver.jpeg.param_checking_enable}
            #define JPEG_CFG_DECODE_ENABLE ${config.driver.jpeg.decode_enable}
            #define JPEG_CFG_ENCODE_ENABLE ${config.driver.jpeg.encode_enable}

            #ifdef __cplusplus
            }
            #endif
        </content>
    </config>
    <module config="config.driver.jpeg" display="Graphics|${module.driver.jpeg.name} JPEG Codec (r_jpeg)" id="module.driver.jpeg" version="1" url="group___j_p_e_g.html">
        <constraint display="Module instances must have unique names">
            "${interface.driver.jpeg.${module.driver.jpeg.name}}" === "1"
        </constraint>
        <constraint display="Requires JPEG Peripheral">
          "${interface.mcu.jpeg}" === "1"
        </constraint>
        <constraint display="When decode is enabled, Decode Process Interrupt Priority must be enabled.">
            "${module.driver.jpeg.jedi_ipl}" != "_disabled" || "${config.driver.jpeg.decode_enable}" != "config.driver.jpeg.decode_enable.enabled"
        </constraint>
        <constraint display="Encode Support must be enabled if Encode|Callback is defined">
            (("${module.driver.jpeg.encode.p_callback}" === "NULL") || ("${config.driver.jpeg.encode_enable}" != "config.driver.jpeg.encode_enable.disabled"))
        </constraint>
        <constraint display="Decode Support must be enabled if Decode|Callback is defined">
            (("${module.driver.jpeg.decode.p_callback}" === "NULL") || ("${config.driver.jpeg.decode_enable}" != "config.driver.jpeg.decode_enable.disabled"))
        </constraint>
        <requires id="module.driver.jpeg.requires.jpeg" interface="interface.mcu.jpeg" visible="false" display="Requires JPEG Peripheral" />
        <provides interface="interface.driver.jpeg" />
        <provides interface="interface.driver.jpeg_on_jpeg" />
        <provides interface="interface.driver.jpeg.${module.driver.jpeg.name}" />

        <!-- General properties -->
        <property id="module.driver.jpeg.name" display="General|Name" default="g_jpeg${_instance}" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.jpeg.name}")</constraint>
        </property>
        <property default="module.driver.jpeg.default_mode.decode" display="General|Default mode" id="module.driver.jpeg.default_mode" description="Set the mode to use when calling R_JPEG_Open. This parameter is only used when both Encode and Decode support are enabled.">
            <option display="Decode" id="module.driver.jpeg.default_mode.decode" value="(JPEG_MODE_DECODE)"/>
            <option display="Encode" id="module.driver.jpeg.default_mode.encode" value="(JPEG_MODE_ENCODE)"/>
        </property>

        <!-- Decode properties -->
        <property id="module.driver.jpeg.decode.input_data_order" display="Decode|Input byte order" default="module.driver.jpeg.decode.input_data_order.normal" description="Select the byte order of the input data for decoding.">
            <select enum="enum.driver.jpeg.byte_swap" />
        </property>
        <property id="module.driver.jpeg.decode.output_data_order" display="Decode|Output byte order" default="module.driver.jpeg.decode.output_data_order.normal" description="Select the byte order of the output data for decoding.">
            <select enum="enum.driver.jpeg.byte_swap" />
        </property>
        <property id="module.driver.jpeg.decode.pixel_format" display="Decode|Output color format" default="module.driver.jpeg.decode.pixel_format.rgb565" description="Select the output pixel format for decode operations.">
            <option id="module.driver.jpeg.decode.pixel_format.argb8888" display="ARGB8888 (32-bit)" value="JPEG_DECODE_PIXEL_FORMAT_ARGB8888" />
            <option id="module.driver.jpeg.decode.pixel_format.rgb565" display="RGB565 (16-bit)" value="JPEG_DECODE_PIXEL_FORMAT_RGB565" />
        </property>
        <property id="module.driver.jpeg.decode.alpha_value" display="Decode|Output alpha (ARGB8888 only)" default="255" description="Specify the alpha value to apply to each output pixel when ARGB8888 format is chosen.">
            <constraint display="Value must be an 8-bit integer (0-255)"> testInteger("${module.driver.jpeg.decode.alpha_value}") &amp;&amp; ("${module.driver.jpeg.decode.alpha_value}" &gt;= 0) &amp;&amp; ("${module.driver.jpeg.decode.alpha_value}" &lt;= 255)
            </constraint>
        </property>
        <property default="NULL" display="Decode|Callback" id="module.driver.jpeg.decode.p_callback" description="If a callback function is provided it will be called from the interrupt service routine (ISR) each time a related IRQ triggers.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.jpeg.decode.p_callback}")</constraint>
        </property>

        <!-- Encode properties -->
        <property default="480" display="Encode|Horizontal resolution" id="module.driver.jpeg.encode.horizontal_resolution" description="Horizontal resolution of the raw image (in pixels). This value can be configured at runtime via R_JPEG_ImageSizeSet.">
            <constraint display="Value cannot be greater than 65535 and must be a non-negative integer divisible by 16">testInteger("${module.driver.jpeg.encode.horizontal_resolution}")&amp;&amp;(("${module.driver.jpeg.encode.horizontal_resolution}") &gt; 0) &amp;&amp; (("${module.driver.jpeg.encode.horizontal_resolution}") &lt;= 65535) &amp;&amp; !(("${module.driver.jpeg.encode.horizontal_resolution}") &amp; 0xF)</constraint>
        </property>
        <property default="272" display="Encode|Vertical resolution" id="module.driver.jpeg.encode.vertical_resolution" description="Vertical resolution of the raw image. This value can be configured at runtime via R_JPEG_ImageSizeSet.">
            <constraint display="Value cannot be greater than 65535 and must be a non-negative integer divisible by 8">testInteger("${module.driver.jpeg.encode.vertical_resolution}")&amp;&amp;(("${module.driver.jpeg.encode.vertical_resolution}") &gt; 0) &amp;&amp; (("${module.driver.jpeg.encode.vertical_resolution}") &lt;= 65535) &amp;&amp; !(("${module.driver.jpeg.encode.vertical_resolution}") &amp; 0x7)</constraint>
        </property>
        <property default="480" display="Encode|Horizontal stride" id="module.driver.jpeg.encode.horizontal_stride_pixels" description="Horizontal stride of the raw image buffer (in pixels). This value can be configured at runtime via R_JPEG_ImageSizeSet.">
            <constraint display="Value cannot be greater than 65535 and must be a non-negative integer">testInteger("${module.driver.jpeg.encode.horizontal_stride_pixels}")&amp;&amp;(("${module.driver.jpeg.encode.horizontal_stride_pixels}") &gt; 0) &amp;&amp; (("${module.driver.jpeg.encode.horizontal_stride_pixels}") &lt;= 65535)</constraint>
        </property>
        <property id="module.driver.jpeg.encode.input_data_order" display="Encode|Input byte order" default="module.driver.jpeg.encode.input_data_order.normal" description="Select the byte order of the input data for encoding.">
            <select enum="enum.driver.jpeg.byte_swap" />
        </property>
        <property id="module.driver.jpeg.encode.output_data_order" display="Encode|Output byte order" default="module.driver.jpeg.encode.output_data_order.normal" description="Select the byte order of the output data for encoding.">
            <select enum="enum.driver.jpeg.byte_swap" />
        </property>
        <property default="512" display="Encode|Reset interval" id="module.driver.jpeg.encode.DRI" description="Set the number of MCUs between RST markers. A value of 0 will disable DRI and RST marker output.">
            <constraint display="Value cannot be greater than 65535 and must be a non-negative integer">testInteger("${module.driver.jpeg.encode.DRI}")&amp;&amp;(("${module.driver.jpeg.encode.DRI}") &gt;= 0) &amp;&amp; (("${module.driver.jpeg.encode.DRI}") &lt;= 65535)</constraint>
        </property>
        <property default="50" display="Encode|Quality factor" id="module.driver.jpeg.encode.quality" description="Set the quality factor for encoding (1-100). Lower values produce smaller images at the cost of image quality.">
            <constraint display="Value must be between 1 and 100 and must be an integer">testInteger("${module.driver.jpeg.encode.quality}")&amp;&amp;(("${module.driver.jpeg.encode.quality}") &gt; 0) &amp;&amp; (("${module.driver.jpeg.encode.quality}") &lt;= 100)</constraint>
        </property>
        <property default="NULL" display="Encode|Callback" id="module.driver.jpeg.encode.p_callback" description="If a callback function is provided it will be called from the interrupt service routine (ISR) each time a related IRQ triggers.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.jpeg.encode.p_callback}")</constraint>
        </property>

        <!-- Interrupts -->
        <property default="board.icu.common.irq.priority12" display="Interrupts|Decode Process Interrupt Priority" id="module.driver.jpeg.jedi_ipl" description="Select the decompression interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
            <interrupt event="event.jpeg.jedi" isr="jpeg_jedi_isr"/>
        </property>
        <property default="" display="Interrupts|Data Transfer Interrupt Priority" id="module.driver.jpeg.jdti_ipl" description="Select the data transfer interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
            <interrupt event="event.jpeg.jdti" isr="jpeg_jdti_isr"/>
        </property>

        <!-- Quantization table calculations -->
        <property default="0" id="module.driver.jpeg.quant_tables">
            <export>
                <![CDATA[
                    eval('' +
                         '/* Get quality factor and clamp to 1-100 */' +
                         'var quality_factor = ${module.driver.jpeg.encode.quality};' +
                         'if(quality_factor < 1)' +
                         '{' +
                         '    quality_factor = 1;' +
                         '}' +
                         'else if(quality_factor > 100)' +
                         '{' +
                         '    quality_factor = 100;' +
                         '}' +
                         '' +
                         'var multiply_factor;' +
                         '' +
                         '/* Base luminance quantization table */' +
                         'var quant_table_0 =' +
                         '[' +
                         '    /* Table K.1 ITU-T81 specification */' +
                         '    16, 11, 10, 16, 24,  40,  51,  61,' +
                         '    12, 12, 14, 19, 26,  58,  60,  55,' +
                         '    14, 13, 16, 24, 40,  57,  69,  56,' +
                         '    14, 17, 22, 29, 51,  87,  80,  62,' +
                         '    18, 22, 37, 56, 68,  109, 103, 77,' +
                         '    24, 35, 55, 64, 81,  104, 113, 92,' +
                         '    49, 64, 78, 87, 103, 121, 120, 101,' +
                         '    72, 92, 95, 98, 112, 100, 103, 99,' +
                         '];' +
                         '' +
                         '/* Base chrominance quantization table */' +
                         'var quant_table_1 =' +
                         '[' +
                         '    /* Table K.2 ITU-T81 specification */' +
                         '    17, 18, 24, 47, 99, 99, 99, 99,' +
                         '    18, 21, 26, 66, 99, 99, 99, 99,' +
                         '    24, 26, 56, 99, 99, 99, 99, 99,' +
                         '    47, 66, 99, 99, 99, 99, 99, 99,' +
                         '    99, 99, 99, 99, 99, 99, 99, 99,' +
                         '    99, 99, 99, 99, 99, 99, 99, 99,' +
                         '    99, 99, 99, 99, 99, 99, 99, 99,' +
                         '    99, 99, 99, 99, 99, 99, 99, 99,' +
                         '];' +
                         '' +
                         '/* Calculatie quality multiplication factor */' +
                         'if(quality_factor < 50)' +
                         '{' +
                         '   multiply_factor = 5000 / quality_factor;' +
                         '}' +
                         'else' +
                         '{' +
                         '   multiply_factor = 200 - (quality_factor * 2);' +
                         '}' +
                         '' +
                         '/* Function to calculate a quantization table based on the above multiplication factor */' +
                         'function calcTable(table)' +
                         '{' +
                         '   var output = "";' +
                         '' +
                         '   for(var i=0; i<64; i++)' +
                         '   {' +
                         '       table[i] = Math.floor(((table[i] * multiply_factor) + 50) / 100);' +
                         '       if(table[i] < 1)' +
                         '           table[i] = 1;' +
                         '       else if(table[i] > 255)' +
                         '           table[i] = 255;' +
                         '' +
                         '        output += table[i] + ", ";' +
                         '    }' +
                         '    ' +
                         '    return output;' +
                         '}' +
                         '' +
                         'var table_output0 = calcTable(quant_table_0);' +
                         'var table_output1 = calcTable(quant_table_1);' +
                         '' +
                         '/* Generate output string */' +
                         'output_tables = "/* Luminance quantization table */" +' +
                         '                "static const uint8_t quant_table_0[] =" +' +
                         '                "{" + ' +
                         '                table_output0 +' +
                         '                "};" +' +
                         '                "/* Chrominance quantization table */" +' +
                         '                "static const uint8_t quant_table_1[] =" +' +
                         '                "{" +' +
                         '                table_output1 +' +
                         '                "};"' +
                         '' +
                         '')
                ]]>
            </export>
        </property>
        <header>

            extern const jpeg_instance_t ${module.driver.jpeg.name};

            /** Access the JPEG instance using these structures when calling API functions directly (::p_api is not used). */
            extern jpeg_instance_ctrl_t ${module.driver.jpeg.name}_ctrl;
            extern const jpeg_cfg_t  ${module.driver.jpeg.name}_cfg;

            #if JPEG_CFG_DECODE_ENABLE
             #ifndef ${module.driver.jpeg.decode.p_callback}
            void ${module.driver.jpeg.decode.p_callback}(jpeg_callback_args_t * p_args);
             #endif
            #endif

            #if JPEG_CFG_ENCODE_ENABLE
             #ifndef ${module.driver.jpeg.encode.p_callback}
            void ${module.driver.jpeg.encode.p_callback}(jpeg_callback_args_t * p_args);
             #endif
            #endif

        </header>
        <includes>
            #include &quot;r_jpeg.h&quot;
        </includes>
        <declarations>

            #if JPEG_CFG_ENCODE_ENABLE

            ${module.driver.jpeg.quant_tables}

            /* Luminance DC coefficients */
            static const uint8_t huffm_dc_table_0[] =
            {
                /* Table K.3 ITU-T81 specification */
                0x00, 0x01, 0x05, 0x01,
                0x01, 0x01, 0x01, 0x01,
                0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0A, 0x0B,
            };

            /* Chrominance DC coefficients */
            static const uint8_t huffm_dc_table_1[] =
            {
                /* Table K.4 ITU-T81 specification */
                0x00, 0x03, 0x01, 0x01,
                0x01, 0x01, 0x01, 0x01,
                0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0A, 0x0B,
            };

            /* Luminance AC coefficients */
            static const uint8_t huffm_ac_table_0[] =
            {
                /* Table K.5 ITU-T81 specification */
                0x00, 0x02, 0x01, 0x03,
                0x03, 0x02, 0x04, 0x03,
                0x05, 0x05, 0x04, 0x04,
                0x00, 0x00, 0x01, 0x7D,
                0x01, 0x02, 0x03, 0x00,
                0x04, 0x11, 0x05, 0x12,
                0x21, 0x31, 0x41, 0x06,
                0x13, 0x51, 0x61, 0x07,
                0x22, 0x71, 0x14, 0x32,
                0x81, 0x91, 0xA1, 0x08,
                0x23, 0x42, 0xB1, 0xC1,
                0x15, 0x52, 0xD1, 0xF0,
                0x24, 0x33, 0x62, 0x72,
                0x82, 0x09, 0x0A, 0x16,
                0x17, 0x18, 0x19, 0x1A,
                0x25, 0x26, 0x27, 0x28,
                0x29, 0x2A, 0x34, 0x35,
                0x36, 0x37, 0x38, 0x39,
                0x3A, 0x43, 0x44, 0x45,
                0x46, 0x47, 0x48, 0x49,
                0x4A, 0x53, 0x54, 0x55,
                0x56, 0x57, 0x58, 0x59,
                0x5A, 0x63, 0x64, 0x65,
                0x66, 0x67, 0x68, 0x69,
                0x6A, 0x73, 0x74, 0x75,
                0x76, 0x77, 0x78, 0x79,
                0x7A, 0x83, 0x84, 0x85,
                0x86, 0x87, 0x88, 0x89,
                0x8A, 0x92, 0x93, 0x94,
                0x95, 0x96, 0x97, 0x98,
                0x99, 0x9A, 0xA2, 0xA3,
                0xA4, 0xA5, 0xA6, 0xA7,
                0xA8, 0xA9, 0xAA, 0xB2,
                0xB3, 0xB4, 0xB5, 0xB6,
                0xB7, 0xB8, 0xB9, 0xBA,
                0xC2, 0xC3, 0xC4, 0xC5,
                0xC6, 0xC7, 0xC8, 0xC9,
                0xCA, 0xD2, 0xD3, 0xD4,
                0xD5, 0xD6, 0xD7, 0xD8,
                0xD9, 0xDA, 0xE1, 0xE2,
                0xE3, 0xE4, 0xE5, 0xE6,
                0xE7, 0xE8, 0xE9, 0xEA,
                0xF1, 0xF2, 0xF3, 0xF4,
                0xF5, 0xF6, 0xF7, 0xF8,
                0xF9, 0xFA,
            };

            /* Chrominance AC coefficients */
            static const uint8_t huffm_ac_table_1[] =
            {
                /* Table K.6 ITU-T81 specification */
                0x00, 0x02, 0x01, 0x02,
                0x04, 0x04, 0x03, 0x04,
                0x07, 0x05, 0x04, 0x04,
                0x00, 0x01, 0x02, 0x77,
                0x00, 0x01, 0x02, 0x03,
                0x11, 0x04, 0x05, 0x21,
                0x31, 0x06, 0x12, 0x41,
                0x51, 0x07, 0x61, 0x71,
                0x13, 0x22, 0x32, 0x81,
                0x08, 0x14, 0x42, 0x91,
                0xA1, 0xB1, 0xC1, 0x09,
                0x23, 0x33, 0x52, 0xF0,
                0x15, 0x62, 0x72, 0xD1,
                0x0A, 0x16, 0x24, 0x34,
                0xE1, 0x25, 0xF1, 0x17,
                0x18, 0x19, 0x1A, 0x26,
                0x27, 0x28, 0x29, 0x2A,
                0x35, 0x36, 0x37, 0x38,
                0x39, 0x3A, 0x43, 0x44,
                0x45, 0x46, 0x47, 0x48,
                0x49, 0x4A, 0x53, 0x54,
                0x55, 0x56, 0x57, 0x58,
                0x59, 0x5A, 0x63, 0x64,
                0x65, 0x66, 0x67, 0x68,
                0x69, 0x6A, 0x73, 0x74,
                0x75, 0x76, 0x77, 0x78,
                0x79, 0x7A, 0x82, 0x83,
                0x84, 0x85, 0x86, 0x87,
                0x88, 0x89, 0x8A, 0x92,
                0x93, 0x94, 0x95, 0x96,
                0x97, 0x98, 0x99, 0x9A,
                0xA2, 0xA3, 0xA4, 0xA5,
                0xA6, 0xA7, 0xA8, 0xA9,
                0xAA, 0xB2, 0xB3, 0xB4,
                0xB5, 0xB6, 0xB7, 0xB8,
                0xB9, 0xBA, 0xC2, 0xC3,
                0xC4, 0xC5, 0xC6, 0xC7,
                0xC8, 0xC9, 0xCA, 0xD2,
                0xD3, 0xD4, 0xD5, 0xD6,
                0xD7, 0xD8, 0xD9, 0xDA,
                0xE2, 0xE3, 0xE4, 0xE5,
                0xE6, 0xE7, 0xE8, 0xE9,
                0xEA, 0xF2, 0xF3, 0xF4,
                0xF5, 0xF6, 0xF7, 0xF8,
                0xF9, 0xFA,
            };
            #endif

            jpeg_instance_ctrl_t ${module.driver.jpeg.name}_ctrl;
            const jpeg_cfg_t  ${module.driver.jpeg.name}_cfg =
            {
                .jedi_ipl           = ${module.driver.jpeg.jedi_ipl},
                .jdti_ipl           = ${module.driver.jpeg.jdti_ipl},
            #if defined(VECTOR_NUMBER_JPEG_JEDI)
                .jedi_irq           = VECTOR_NUMBER_JPEG_JEDI,
            #else
                .jedi_irq           = FSP_INVALID_VECTOR,
            #endif
                .jdti_irq           = VECTOR_NUMBER_JPEG_JDTI,

            #if JPEG_CFG_DECODE_ENABLE &amp;&amp; JPEG_CFG_ENCODE_ENABLE
                .default_mode              = ${module.driver.jpeg.default_mode},
            #endif

            #if JPEG_CFG_DECODE_ENABLE
                .decode_input_data_order   = ${module.driver.jpeg.decode.input_data_order},
                .decode_output_data_order  = ${module.driver.jpeg.decode.output_data_order},
                .pixel_format              = ${module.driver.jpeg.decode.pixel_format},
                .alpha_value               = ${module.driver.jpeg.decode.alpha_value},
                .p_decode_callback         = ${module.driver.jpeg.decode.p_callback},
                .p_decode_context          = NULL,
            #endif

            #if JPEG_CFG_ENCODE_ENABLE
                .encode_input_data_order   = ${module.driver.jpeg.encode.input_data_order},
                .encode_output_data_order  = ${module.driver.jpeg.encode.output_data_order},
                .dri_marker                = ${module.driver.jpeg.encode.DRI},
                .horizontal_resolution     = ${module.driver.jpeg.encode.horizontal_resolution},
                .vertical_resolution       = ${module.driver.jpeg.encode.vertical_resolution},
                .horizontal_stride_pixels  = ${module.driver.jpeg.encode.horizontal_stride_pixels},
                .p_quant_luma_table        = quant_table_0,
                .p_quant_chroma_table      = quant_table_1,
                .p_huffman_luma_ac_table   = huffm_ac_table_0,
                .p_huffman_luma_dc_table   = huffm_dc_table_0,
                .p_huffman_chroma_ac_table = huffm_ac_table_1,
                .p_huffman_chroma_dc_table = huffm_dc_table_1,
                .p_encode_callback         = ${module.driver.jpeg.encode.p_callback},
                .p_encode_context          = NULL,
            #endif
            };

            const jpeg_instance_t ${module.driver.jpeg.name} =
            {
                .p_api  = (jpeg_api_t const *)&amp;g_jpeg_on_jpeg,
                .p_ctrl = &amp;${module.driver.jpeg.name}_ctrl,
                .p_cfg  = &amp;${module.driver.jpeg.name}_cfg
            };

        </declarations>
        <api configurable="true">
            <file>ra/fsp/inc/instances/r_jpeg.h</file>
            <file>ra/fsp/inc/api/r_jpeg_api.h</file>
        </api>
    </module>
</raModuleDescription>
