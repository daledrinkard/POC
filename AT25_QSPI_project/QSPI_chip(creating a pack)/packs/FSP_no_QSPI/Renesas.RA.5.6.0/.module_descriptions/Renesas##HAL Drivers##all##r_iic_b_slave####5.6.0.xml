<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.driver.iic_b_slave" path="fsp_cfg/r_iic_b_slave_cfg.h" version="0">
        <property default="config.driver.iic_b_slave.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.iic_b_slave.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.iic_b_slave.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.iic_b_slave.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.iic_b_slave.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.iic_b_slave.dtc_enable.disabled" display="DTC on Transmission and Reception" id="config.driver.iic_b_slave.dtc_enable" description="If enabled, DTC instances will be included in the build for both transmission and reception.">
            <option display="Enabled" id="config.driver.iic_b_slave.dtc_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.iic_b_slave.dtc_enable.disabled" value="(0)"/>
        </property>
        <content>
#ifdef __cplusplus
extern "C" {
#endif

#define IIC_B_SLAVE_CFG_PARAM_CHECKING_ENABLE ${config.driver.iic_b_slave.param_checking_enable}
#define IIC_B_SLAVE_CFG_DTC_ENABLE ${config.driver.iic_b_slave.dtc_enable}

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.driver.iic_b_slave" display="Connectivity|${module.driver.i2c_slave.name} I2C Slave (r_iic_b_slave)" id="module.driver.i2c_on_iic_b_slave" version="1" url="group___i_i_c___b___s_l_a_v_e.html">
        <constraint display="The Configurable value for 7-bit address mode should be between 0x08 to 0x77; also refer to the I2C spec for information about reserved addresses">
            ((testInteger("${module.driver.i2c_slave.slave}")  &amp;&amp; ("${module.driver.i2c_slave.slave}" &gt; 7) &amp;&amp; ("${module.driver.i2c_slave.slave}" &lt; 120)) || (("${module.driver.i2c_slave.addr_mode}") != ("module.driver.i2c_slave.addr_mode.addr_mode_7bit")))
        </constraint>
        <constraint display="Maximum configurable value for 10 bit address mode is 0x3FF ">
            ((testInteger("${module.driver.i2c_slave.slave}")  &amp;&amp; ("${module.driver.i2c_slave.slave}" &gt;= 0)&amp;&amp; ("${module.driver.i2c_slave.slave}" &lt;= 1023)) || (("${module.driver.i2c_slave.addr_mode}") != ("module.driver.i2c_slave.addr_mode.addr_mode_10bit")))
        </constraint>
        <constraint display="Fast-mode plus is not supported on specified Channel.">
            (("${module.driver.i2c_slave.channel}" &lt; 1) || (("${module.driver.i2c_slave.rate}") != ("module.driver.i2c_slave.rate.rate_fastplus")))
        </constraint>
        <constraint display="Unique name required for each instance">
            "${interface.driver.i2c_slave.${module.driver.i2c_slave.name}}" === "1"
        </constraint>
        <constraint display="Requires IIC Peripheral">
          "${interface.mcu.iic_b.external}" === "1"
        </constraint>
        <constraint display="This channel is already being used in I3C mode.">
          !("${interface.driver.i3c.${module.driver.i2c_slave.channel}}" &gt; "0")
        </constraint>
        <constraint display="Both IIC Master and Slave cannot be configured on the same channel.">
          !("${interface.driver.i2c_master.${module.driver.i2c_slave.channel}}" &gt; "0")
        </constraint>
        <constraint display="Channel not available on selected MCU">
            "${interface.mcu.iic_b.${module.driver.i2c_slave.channel}}" === "1"
        </constraint>
        <constraint><![CDATA[eval('var enum_val = function (e) { return parseInt(e.replaceAll("[^0-9]", ""));};'+
'var txi_rxi_ipl = (enum_val("${module.driver.i2c_slave.ipl}"));' +
'var error_ipl = (enum_val("${module.driver.i2c_slave.eri_ipl}"));' +
'(error_ipl <= txi_rxi_ipl) ? null :' +
'"Interrupt priority level of Error interrupt must be higher (numerically lower) than or equal to that of the Transmit, Receive, and Transmit End interrupts."')]]></constraint>
        <constraint display="Requires IICCLK/I3CCLK to be enabled on the Clocks tab.">
             testExists("${board.clock.peripheral.iic_b}") &amp;&amp; (Number("${board.clock.peripheral.iic_b}") &gt; 0)
        </constraint>
        <constraint display="DTC support must be enabled to use DTC">
            ("${config.driver.iic_b_slave.dtc_enable}" === "config.driver.iic_b_slave.dtc_enable.enabled") ||
            ((!testExists("${module.driver.i2c_on_iic_b_slave.requires.transfer_tx::module.driver.transfer.name}")) &amp;&amp;
             (!testExists("${module.driver.i2c_on_iic_b_slave.requires.transfer_rx::module.driver.transfer.name}")))
        </constraint>
        <constraint display="Add DTC driver for transmission/reception if DTC support is enabled">
           ("${config.driver.iic_b_slave.dtc_enable}" != "config.driver.iic_b_slave.dtc_enable.enabled")||
           ((testExists("${module.driver.i2c_on_iic_b_slave.requires.transfer_tx::module.driver.transfer.name}")) ||
           (testExists("${module.driver.i2c_on_iic_b_slave.requires.transfer_rx::module.driver.transfer.name}")))
        </constraint>
        <requires id="module.driver.i2c_on_iic_b_slave.requires.iic_b" interface="interface.mcu.iic_b.external" visible="false" display="Requires IIC/I3C Peripheral" />
        <requires id="module.driver.i2c_on_iic_b_slave.requires.transfer_tx" interface="interface.driver.transfer_on_dtc" display="Add DTC Driver for Transmission [Optional]" find="false" optional="true" >
            <override property="module.driver.transfer.size" value="module.driver.transfer.size.size_1_byte"/>
            <override property="module.driver.transfer.mode" value="module.driver.transfer.mode.mode_normal"/>
            <override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_fixed"/>
            <override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_incremented"/>
            <override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_source"/>
            <override property="module.driver.transfer.p_dest" value="NULL"/>
            <override property="module.driver.transfer.p_src" value="NULL"/>
            <override property="module.driver.transfer.length" value="0"/>
            <override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
            <override property="module.driver.transfer.num_blocks" value="0"/>
            <override property="module.driver.transfer.p_callback" value="NULL"/>
            <override property="module.driver.transfer.activation_source" value="_signal.event.iicb${module.driver.i2c_slave.channel}.txi"/>
        </requires>
        <requires id="module.driver.i2c_on_iic_b_slave.requires.transfer_rx" interface="interface.driver.transfer_on_dtc" display="Add DTC Driver for Reception [Optional]" find="false" optional="true" >
            <override property="module.driver.transfer.size" value="module.driver.transfer.size.size_1_byte"/>
            <override property="module.driver.transfer.mode" value="module.driver.transfer.mode.mode_normal"/>
            <override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_incremented"/>
            <override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_fixed"/>
            <override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_destination"/>
            <override property="module.driver.transfer.p_dest" value="NULL"/>
            <override property="module.driver.transfer.p_src" value="NULL"/>
            <override property="module.driver.transfer.length" value="0"/>
            <override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
            <override property="module.driver.transfer.num_blocks" value="0"/>
            <override property="module.driver.transfer.p_callback" value="NULL"/>
            <override property="module.driver.transfer.activation_source" value="_signal.event.iicb${module.driver.i2c_slave.channel}.rxi"/>
        </requires>
        <provides interface="interface.driver.i2c_slave_on_iic" />
        <provides interface="interface.driver.i2c_slave.${module.driver.i2c_slave.name}" />
        <provides interface="interface.peripheral.iic${module.driver.i2c_slave.channel}" />
        <provides interface="interface.driver.i2c_slave.${module.driver.i2c_slave.channel}" />
        <property default="g_i2c_slave${_instance}" display="Name" id="module.driver.i2c_slave.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.i2c_slave.name}")</constraint>
        </property>
        <property default="0" display="Channel" id="module.driver.i2c_slave.channel" description="Specify the IIC channel.">
            <constraint display="Value must be a non-negative integer">testInteger("${module.driver.i2c_slave.channel}")  &amp;&amp; ("${module.driver.i2c_slave.channel}" &gt;= 0)</constraint>
            <signal event="event.iicb${module.driver.i2c_slave.channel}.rxi" />
            <signal event="event.iicb${module.driver.i2c_slave.channel}.txi" />
            <signal event="event.iicb${module.driver.i2c_slave.channel}.tei" />
            <signal event="event.iicb${module.driver.i2c_slave.channel}.eri" />
        </property>
        <property default="module.driver.i2c_slave.rate.rate_standard" display="Rate" id="module.driver.i2c_slave.rate" description="Select the transfer rate.\n\nIf the delay for the requested transfer rate cannot be achieved, the settings with the largest possible transfer rate that is less than or equal to the requested transfer rate are used. The theoretical calculated delay is printed in a comment in the generated iic_b_slave_extended_cfg_t structure.">
            <option display="Standard" id="module.driver.i2c_slave.rate.rate_standard" value="I2C_SLAVE_RATE_STANDARD"/>
            <option display="Fast-mode" id="module.driver.i2c_slave.rate.rate_fast" value="I2C_SLAVE_RATE_FAST"/>
            <option display="Fast-mode plus" id="module.driver.i2c_slave.rate.rate_fastplus" value="I2C_SLAVE_RATE_FASTPLUS"/>
        </property>
        <property default="module.driver.i2c_slave.cks.cks_1" display="Internal Reference Clock" id="module.driver.i2c_slave.cks" description="Select the internal reference clock for IIC slave. The internal reference clock is used only to determine the clock frequency of the noise filter samples. I2C Clock can be either IICCLK or PCLKD based on the MCU.">
            <option display="I2C Clock / 1" id="module.driver.i2c_slave.cks.cks_1" value="0"/>
            <option display="I2C Clock / 2" id="module.driver.i2c_slave.cks.cks_2" value="1"/>
            <option display="I2C Clock / 4" id="module.driver.i2c_slave.cks.cks_4" value="2"/>
            <option display="I2C Clock / 8" id="module.driver.i2c_slave.cks.cks_8" value="3"/>
            <option display="I2C Clock / 16" id="module.driver.i2c_slave.cks.cks_16" value="4"/>
            <option display="I2C Clock / 32" id="module.driver.i2c_slave.cks.cks_32" value="5"/>
            <option display="I2C Clock / 64" id="module.driver.i2c_slave.cks.cks_64" value="6"/>
            <option display="I2C Clock / 128" id="module.driver.i2c_slave.cks.cks_128" value="7"/>
        </property>
        <property default="module.driver.i2c_slave.dfs.3" display="Digital Noise Filter Stage Select" id="module.driver.i2c_slave.dfs" description="Select the number of digital filter stages for IIC Slave.">
            <option display="Disabled" id="module.driver.i2c_slave.dfs.disabled" value="0"/>
            <option display="Single-stage filter" id="module.driver.i2c_slave.dfs.1" value="1"/>
            <option display="2-stage filter" id="module.driver.i2c_slave.dfs.2" value="2"/>
            <option display="3-stage filter" id="module.driver.i2c_slave.dfs.3" value="3"/>
            <option display="4-stage filter" id="module.driver.i2c_slave.dfs.4" value="4"/>
            <option display="5-stage filter" id="module.driver.i2c_slave.dfs.5" value="5"/>
            <option display="6-stage filter" id="module.driver.i2c_slave.dfs.6" value="6"/>
            <option display="7-stage filter" id="module.driver.i2c_slave.dfs.7" value="7"/>
            <option display="8-stage filter" id="module.driver.i2c_slave.dfs.8" value="8"/>
            <option display="9-stage filter" id="module.driver.i2c_slave.dfs.9" value="9"/>
            <option display="10-stage filter" id="module.driver.i2c_slave.dfs.10" value="10"/>
            <option display="11-stage filter" id="module.driver.i2c_slave.dfs.11" value="11"/>
            <option display="12-stage filter" id="module.driver.i2c_slave.dfs.12" value="12"/>
            <option display="13-stage filter" id="module.driver.i2c_slave.dfs.13" value="13"/>
            <option display="14-stage filter" id="module.driver.i2c_slave.dfs.14" value="14"/>
            <option display="15-stage filter" id="module.driver.i2c_slave.dfs.15" value="15"/>
            <option display="16-stage filter" id="module.driver.i2c_slave.dfs.16" value="16"/>
            <export><![CDATA[eval('' +
'/* INPUTS */' +
'    var rate_enum = "${module.driver.i2c_slave.rate}";' +
'    var peripheral_clock = ${board.clock.peripheral.iic_b};' +
'    var cks = ${module.driver.i2c_slave.cks};' +
'    var digital_filter_stages = ${module.driver.i2c_slave.dfs};' +
'    var requested_delay_ns = 0;' +
'' +
'    if ("I2C_SLAVE_RATE_FASTPLUS" == rate_enum)' +
'    {' +
'        requested_delay_ns = 50;' +
'    }' +
'    else if ("I2C_SLAVE_RATE_FAST" == rate_enum)' +
'    {' +
'        requested_delay_ns = 100;' +
'    }' +
'    else' +
'    {' +
'        requested_delay_ns = 250;' +
'    }' +
'' +
'    /* cks (IREFCKS) is stored in the lower 3 bits [2:0], filter stages is stored in bits [3:0], bit 4 is set to disable noise filter. */' +
'    var min_brl = digital_filter_stages + 1;' +
'    var ns_per_sec = 1000000000;' +
'    var divided_pclk = peripheral_clock / (1 << cks);' +
'    var brl = Math.ceil(divided_pclk * requested_delay_ns / ns_per_sec);' +
'' +
'    if (brl < min_brl)' +
'    {' +
'        brl = min_brl;' +
'    }' +
'' +
'    var actual_delay = brl * ns_per_sec / divided_pclk;' +
'' +
'    bitrate_setting = "/* Actual delay: " + actual_delay.toFixed(0) + " ns. */" + ' +
'                   " .clock_settings.brl_value = " + brl.toString() +' +
'                   ", .clock_settings.digital_filter_stages = " + digital_filter_stages.toString() +' +
'                   ", .clock_settings.cks_value = " + cks.toString();' +
'    bitrate_setting' +
'')
]]>            </export>
        </property>
        <property default="0x08" display="Slave Address" id="module.driver.i2c_slave.slave" description="Specify the slave address.">
            <constraint display="Value must be non-negative">testInteger("${module.driver.i2c_slave.slave}")</constraint>
        </property>
        <property default="module.driver.i2c_slave.general_call_enable.disabled" display="General Call" id="module.driver.i2c_slave.general_call_enable" description="Allows the slave to respond to general call address: 0x00.">
            <option display="Enabled" id="module.driver.i2c_slave.general_call_enable.enabled" value="true"/>
            <option display="Disabled" id="module.driver.i2c_slave.general_call_enable.disabled" value="false"/>
        </property>
        <property default="module.driver.i2c_slave.addr_mode.addr_mode_7bit" display="Address Mode" id="module.driver.i2c_slave.addr_mode" description="Select the slave address mode.">
            <option display="7-Bit" id="module.driver.i2c_slave.addr_mode.addr_mode_7bit" value="I2C_SLAVE_ADDR_MODE_7BIT"/>
            <option display="10-Bit" id="module.driver.i2c_slave.addr_mode.addr_mode_10bit" value="I2C_SLAVE_ADDR_MODE_10BIT"/>
        </property>
        <property default="module.driver.i2c_slave.scl_low_hold_wait_enable.disabled" display="Clock Stretching" id="module.driver.i2c_slave.scl_low_hold_wait_enable" description="Configure Clock Stretching.">
            <option display="Enabled" id="module.driver.i2c_slave.scl_low_hold_wait_enable.enabled" value="true"/>
            <option display="Disabled" id="module.driver.i2c_slave.scl_low_hold_wait_enable.disabled" value="false"/>
        </property>
        <property default="g_iic_b_slave${_instance}_callback" display="Callback" id="module.driver.i2c_slave.p_callback" description="A user callback function must be provided. This will be called from the interrupt service routine (ISR) to report I2C Slave transaction events and status.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.i2c_slave.p_callback}")</constraint>
        </property>
        <property default="" display="Interrupt Priority Level|Transmit, Receive, and Transmit End" id="module.driver.i2c_slave.ipl" description="Select the interrupt priority level. This is set for TXI, RXI, and TEI interrupts.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
            <interrupt event="event.iicb${module.driver.i2c_slave.channel}.rxi" isr="iic_b_slave_rxi_isr"/>
            <interrupt event="event.iicb${module.driver.i2c_slave.channel}.txi" isr="iic_b_slave_txi_isr"/>
            <interrupt event="event.iicb${module.driver.i2c_slave.channel}.tei" isr="iic_b_slave_tei_isr"/>
            <interrupt event="event.iicb${module.driver.i2c_slave.channel}.eri" isr="iic_b_slave_eri_isr"/>
        </property>
        <property default="" display="Interrupt Priority Level|Error" id="module.driver.i2c_slave.eri_ipl" description="Select the interrupt priority level. This is set for ERI interrupt.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
            <interrupt event="event.iicb${module.driver.i2c_slave.channel}.eri" isr="iic_b_slave_eri_isr"/>
        </property>
        <peripheral name="IIC${module.driver.i2c_slave.channel}" component="iic${module.driver.i2c_slave.channel}" />
        <symbol id="symbol.driver.i2c_slave.name" value="${module.driver.i2c_slave.name}"/>
        <symbol id="symbol.driver.i2c_slave.guard.open" value="${module.driver.i2c_slave.name}_open_guard"/>
        <symbol id="symbol.driver.i2c_slave.guard.macro.open" value="FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Open"/>
        <symbol id="symbol.driver.i2c_slave.guard.read" value="${module.driver.i2c_slave.name}_read_guard"/>
        <symbol id="symbol.driver.i2c_slave.guard.macro.read" value="FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Read"/>
        <symbol id="symbol.driver.i2c_slave.guard.write" value="${module.driver.i2c_slave.name}_write_guard"/>
        <symbol id="symbol.driver.i2c_slave.guard.macro.write" value="FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Write"/>
        <symbol id="symbol.driver.i2c_slave.guard.close" value="${module.driver.i2c_slave.name}_close_guard"/>
        <symbol id="symbol.driver.i2c_slave.guard.macro.close" value="FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Close"/>
        <symbol id="symbol.driver.i2c_slave.guard.callback_set" value="${module.driver.i2c_slave.name}_callback_set_guard"/>
        <symbol id="symbol.driver.i2c_slave.guard.macro.callback_set" value="FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_CallbackSet"/>
        <symbol id="symbol.driver.i2c_slave.nsc_api" value="${module.driver.i2c_slave.name}_nsc_api"/>
        <symbol id="symbol.driver.i2c_slave.cfg" value="${module.driver.i2c_slave.name}_cfg"/>
        <symbol id="symbol.driver.i2c_slave.ctrl" value="${module.driver.i2c_slave.name}_ctrl"/>
        <symbol id="symbol.driver.i2c_slave.extend" value="${module.driver.i2c_slave.name}_extend"/>
        <header>
/** I2C Slave on IIC Instance. */
extern const i2c_slave_instance_t ${module.driver.i2c_slave.name};

/** Access the I2C Slave instance using these structures when calling API functions directly (::p_api is not used). */
extern iic_b_slave_instance_ctrl_t ${module.driver.i2c_slave.name}_ctrl;
extern const i2c_slave_cfg_t ${module.driver.i2c_slave.name}_cfg;

#ifndef ${module.driver.i2c_slave.p_callback}
void ${module.driver.i2c_slave.p_callback}(i2c_slave_callback_args_t * p_args);
#endif
        </header>
        <includes>
#include &quot;r_iic_b_slave.h&quot;
#include &quot;r_i2c_slave_api.h&quot;
        </includes>
        <declarations>
iic_b_slave_instance_ctrl_t ${module.driver.i2c_slave.name}_ctrl;
const iic_b_slave_extended_cfg_t ${module.driver.i2c_slave.name}_extend =
{
    ${module.driver.i2c_slave.dfs},
};
const i2c_slave_cfg_t ${module.driver.i2c_slave.name}_cfg =
{
    .channel                 = ${module.driver.i2c_slave.channel},
    .rate                    = ${module.driver.i2c_slave.rate},
    .slave                   = ${module.driver.i2c_slave.slave},
    .general_call_enable     = ${module.driver.i2c_slave.general_call_enable},
    .addr_mode               = ${module.driver.i2c_slave.addr_mode},
#if (IIC_B_SLAVE_CFG_DTC_ENABLE)
#define RA_NOT_DEFINED (1)
#if (RA_NOT_DEFINED == ${module.driver.i2c_on_iic_b_slave.requires.transfer_tx::module.driver.transfer.name})
                .p_transfer_tx       = NULL,
#else
                .p_transfer_tx       = &amp;${module.driver.i2c_on_iic_b_slave.requires.transfer_tx::module.driver.transfer.name},
#endif
#if (RA_NOT_DEFINED == ${module.driver.i2c_on_iic_b_slave.requires.transfer_rx::module.driver.transfer.name})
                .p_transfer_rx       = NULL,
#else
                .p_transfer_rx       = &amp;${module.driver.i2c_on_iic_b_slave.requires.transfer_rx::module.driver.transfer.name},
#endif
#undef RA_NOT_DEFINED
#endif
    .p_callback              = ${module.driver.i2c_slave.p_callback},
    .p_context               = NULL,
#if defined(VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_RXI)
    .rxi_irq                 = VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_RXI,
#else
    .rxi_irq                 = FSP_INVALID_VECTOR,
#endif
#if defined(VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_TXI)
    .txi_irq                 = VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_TXI,
#else
    .txi_irq                 = FSP_INVALID_VECTOR,
#endif
#if defined(VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_TEI)
    .tei_irq                 = VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_TEI,
#else
    .tei_irq                 = FSP_INVALID_VECTOR,
#endif
#if defined(VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_ERI)
    .eri_irq                 = VECTOR_NUMBER_IICB${module.driver.i2c_slave.channel}_ERI,
#else
    .eri_irq                 = FSP_INVALID_VECTOR,
#endif
    .ipl                     = ${module.driver.i2c_slave.ipl},
    .eri_ipl                 = ${module.driver.i2c_slave.eri_ipl},
    .clock_stretching_enable = ${module.driver.i2c_slave.scl_low_hold_wait_enable},
    .p_extend            = &amp;${module.driver.i2c_slave.name}_extend,
};
/* Instance structure to use this module. */
const i2c_slave_instance_t ${module.driver.i2c_slave.name} =
{
    .p_ctrl        = &amp;${module.driver.i2c_slave.name}_ctrl,
    .p_cfg         = &amp;${module.driver.i2c_slave.name}_cfg,
    .p_api         = &amp;g_i2c_slave_on_iic_b
};
        </declarations>
        <guard>
            <header>

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_open_guard(i2c_slave_ctrl_t *const p_api_ctrl, i2c_slave_cfg_t const *const p_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_read_guard(i2c_slave_ctrl_t *const p_api_ctrl, uint8_t *const p_dest, uint32_t const bytes);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_write_guard(i2c_slave_ctrl_t *const p_api_ctrl, uint8_t *const p_src, uint32_t const bytes);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_close_guard(i2c_slave_ctrl_t *const p_api_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_callback_set_guard(i2c_slave_ctrl_t *const p_api_ctrl, void(*p_callback)(i2c_slave_callback_args_t *), void const *const p_context, i2c_slave_callback_args_t *const p_callback_memory);

            </header>
            <template name="${module.driver.i2c_slave.name}_guard.c">
                <![CDATA[
                    #include "guard.h"


BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_open_guard (i2c_slave_ctrl_t *const p_api_ctrl, i2c_slave_cfg_t const *const p_cfg)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);
    FSP_PARAMETER_NOT_USED(p_cfg);

    return R_IIC_B_SLAVE_Open(&${module.driver.i2c_slave.name}_ctrl, &${module.driver.i2c_slave.name}_cfg);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_read_guard (i2c_slave_ctrl_t *const p_api_ctrl, uint8_t *const p_dest, uint32_t const bytes)
{
    /* Verify all pointers are in non-secure memory. */
    uint8_t *const p_dest_checked = cmse_check_address_range((void *) p_dest, bytes, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_dest_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);

    return R_IIC_B_SLAVE_Read(&${module.driver.i2c_slave.name}_ctrl, p_dest_checked, bytes);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_write_guard (i2c_slave_ctrl_t *const p_api_ctrl, uint8_t *const p_src, uint32_t const bytes)
{
    /* Verify all pointers are in non-secure memory. */
    uint8_t *const p_src_checked = cmse_check_address_range((void *) p_src, bytes, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_src_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);

    return R_IIC_B_SLAVE_Write(&${module.driver.i2c_slave.name}_ctrl, p_src_checked, bytes);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_close_guard (i2c_slave_ctrl_t *const p_api_ctrl)
{
    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);

    return R_IIC_B_SLAVE_Close(&${module.driver.i2c_slave.name}_ctrl);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_callback_set_guard (i2c_slave_ctrl_t *const p_api_ctrl, void(*p_callback)(i2c_slave_callback_args_t *), void const *const p_context, i2c_slave_callback_args_t *const p_callback_memory)
{
    /* Verify all pointers are in non-secure memory. */
    void(*p_callback_checked)(i2c_slave_callback_args_t *) = (void(*)(i2c_slave_callback_args_t *)) cmse_check_address_range((void *) p_callback, sizeof(void *), CMSE_AU_NONSECURE);
    FSP_ASSERT(p_callback_checked != NULL);
    i2c_slave_callback_args_t *const p_callback_memory_checked = cmse_check_pointed_object(p_callback_memory, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_callback_memory_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);
    FSP_PARAMETER_NOT_USED(p_context);

    return R_IIC_B_SLAVE_CallbackSet(&${module.driver.i2c_slave.name}_ctrl, p_callback_checked, p_context, p_callback_memory_checked);
}

                ]]>
            </template>
        </guard>
        <nsc>
            <header>

#define FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Open() ${module.driver.i2c_slave.name}_open_guard(FSP_SECURE_ARGUMENT, FSP_SECURE_ARGUMENT)

#define FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Read(p_dest, bytes) ${module.driver.i2c_slave.name}_read_guard(FSP_SECURE_ARGUMENT, p_dest, bytes)

#define FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Write(p_src, bytes) ${module.driver.i2c_slave.name}_write_guard(FSP_SECURE_ARGUMENT, p_src, bytes)

#define FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_Close() ${module.driver.i2c_slave.name}_close_guard(FSP_SECURE_ARGUMENT)

#define FSP_GUARD_${module.driver.i2c_slave.name}_R_IIC_B_SLAVE_CallbackSet(p_callback, p_context, p_callback_memory) ${module.driver.i2c_slave.name}_callback_set_guard(FSP_SECURE_ARGUMENT, p_callback, p_context, p_callback_memory)



BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_open_guard(i2c_slave_ctrl_t *const p_api_ctrl, i2c_slave_cfg_t const *const p_cfg);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_read_guard(i2c_slave_ctrl_t *const p_api_ctrl, uint8_t *const p_dest, uint32_t const bytes);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_write_guard(i2c_slave_ctrl_t *const p_api_ctrl, uint8_t *const p_src, uint32_t const bytes);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_close_guard(i2c_slave_ctrl_t *const p_api_ctrl);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.i2c_slave.name}_callback_set_guard(i2c_slave_ctrl_t *const p_api_ctrl, void(*p_callback)(i2c_slave_callback_args_t *), void const *const p_context, i2c_slave_callback_args_t *const p_callback_memory);


extern const i2c_slave_instance_t ${module.driver.i2c_slave.name};
            </header>
            <declarations>
                <![CDATA[
static const i2c_slave_api_t ${module.driver.i2c_slave.name}_nsc_api =
{
    .open = ${module.driver.i2c_slave.name}_open_guard,
    .read = ${module.driver.i2c_slave.name}_read_guard,
    .write = ${module.driver.i2c_slave.name}_write_guard,
    .close = ${module.driver.i2c_slave.name}_close_guard,
    .callbackSet = ${module.driver.i2c_slave.name}_callback_set_guard,
};
const i2c_slave_instance_t ${module.driver.i2c_slave.name} =
{
    .p_api = &${module.driver.i2c_slave.name}_nsc_api,
    .p_ctrl = FSP_SECURE_ARGUMENT,
    .p_cfg = FSP_SECURE_ARGUMENT,
};
                ]]>
            </declarations>
        </nsc>
        <api configurable="true">
            <file>ra/fsp/inc/instances/r_iic_b_slave.h</file>
            <file>ra/fsp/inc/api/r_i2c_slave_api.h</file>
            <file>ra/fsp/inc/api/r_transfer_api.h</file>
        </api>
    </module>
</raModuleDescription>
