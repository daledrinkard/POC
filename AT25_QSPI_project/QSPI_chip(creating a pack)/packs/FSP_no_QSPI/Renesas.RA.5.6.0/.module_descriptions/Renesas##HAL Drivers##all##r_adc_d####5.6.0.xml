<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.driver.adc_d" path="fsp_cfg/r_adc_d_cfg.h" version="0">
        <property default="config.driver.adc.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.adc.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.adc.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.adc.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.adc.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.adc.internal_reference_voltage.disabled" display="Internal Reference Voltage Support" id="config.driver.adc.internal_reference_voltage" description="Enable Internal Reference Voltage support for the ADC module.">
            <option display="Enabled" id="config.driver.adc.internal_reference_voltage.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.adc.internal_reference_voltage.disabled" value="(0)"/>
        </property>
        <property default="config.driver.adc.snooze_mode_support.disabled" display="Snooze Mode Support" id="config.driver.adc.snooze_mode_support" description="Enable Snooze Mode Support.">
            <option display="Enabled" id="config.driver.adc.snooze_mode_support.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.adc.snooze_mode_support.disabled" value="(0)"/>
        </property>
        <property default="config.driver.adc.interrupt_support.enabled" display="Interrupt Support" id="config.driver.adc.interrupt_support" description="Enable Scan End Interrupt support for the ADC module.">
            <option display="Enabled" id="config.driver.adc.interrupt_support.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.adc.interrupt_support.disabled" value="(0)"/>
        </property>
        <content>
#ifdef __cplusplus
extern "C" {
#endif

#define ADC_D_CFG_PARAM_CHECKING_ENABLE ${config.driver.adc.param_checking_enable}
#define ADC_D_CFG_INTERNAL_REF_VOLT_ENABLE ${config.driver.adc.internal_reference_voltage}
#define ADC_D_CFG_SNOOZE_SUPPORT_ENABLE ${config.driver.adc.snooze_mode_support}
#define ADC_D_CFG_INTERRUPT_SUPPORT_ENABLE ${config.driver.adc.interrupt_support}

#ifdef __cplusplus
}
#endif
        </content>
    </config>
    <module config="config.driver.adc_d" display="Analog|${module.driver.adc.name} ADC (r_adc_d)" id="module.driver.adc_on_adc_d" version="1" url="group___a_d_c___d.html">
        <constraint display="Internal Reference Voltage Support must be enabled when measuring the IVREF channels.">
            !(
                ("config.driver.adc.internal_reference_voltage.disabled" == "${config.driver.adc.internal_reference_voltage}")
                &amp;&amp; (   ("module.driver.adc.positive_vref.ivref" == "${module.driver.adc.positive_vref}")
                            || ("module.driver.adc.input_channel.voltage" == "${module.driver.adc.input_channel}"))
            )
        </constraint>
        <constraint display="Interrupt Support must be enabled to use Interrupts|Callback and Interrupts|Scan End Interrupt Priority">
            !(
                ("config.driver.adc.interrupt_support.disabled" == "${config.driver.adc.interrupt_support}")
                &amp;&amp; (   ("${module.driver.adc.p_callback}" != "NULL") || ("${module.driver.adc.scan_end_ipl}" != "_disabled"))
            )
        </constraint>
        <constraint display="Callback requires Interrupts|Scan End Interrupt Priority to be enabled.">
            ("${module.driver.adc.p_callback}" === "NULL") || ("${module.driver.adc.scan_end_ipl}" != "_disabled")
        </constraint>
        <constraint display="Enter a function name in Interrupts|Callback if interrupts are used">
            ("${module.driver.adc.p_callback}" != "NULL") || ("${module.driver.adc.scan_end_ipl}" == "_disabled")
        </constraint>
        <constraint display="The lower bound value should be less than the upper bound value">
            ("${module.driver.adc.ulbaudsetting.adul}" &gt; "${module.driver.adc.ulbaudsetting.adll}")
        </constraint>
        <constraint display="When the internal reference voltage is selected as the positive side reference voltage, Operation Voltage Modes Normal 1 and Normal 2 cannot be used.">
            ("module.driver.adc.positive_vref.ivref" != "${module.driver.adc.positive_vref}") ||
            (("module.driver.adc.operation_voltage.normal1" != "${module.driver.adc.operation_voltage}") &amp;&amp;
             ("module.driver.adc.operation_voltage.normal2" != "${module.driver.adc.operation_voltage}"))
        </constraint>
        <constraint display="When the internal reference voltage is selected as the positive side reference voltage, setting internal reference voltage or temperature sensor channel as an A/D conversion channel is not allowed.">
            ("module.driver.adc.positive_vref.ivref" != "${module.driver.adc.positive_vref}") ||
            (("module.driver.adc.input_channel.voltage" != "${module.driver.adc.input_channel}") &amp;&amp;
             ("module.driver.adc.input_channel.temperature" != "${module.driver.adc.input_channel}"))
        </constraint>
        <constraint display="When the internal reference voltage or temperature sensor output voltage is selected as the target for A/D conversion, Operation Voltage Modes Normal 1 or Low-Voltage 1 can not be used.">
            (("module.driver.adc.input_channel.temperature" != "${module.driver.adc.input_channel}") &amp;&amp;
             ("module.driver.adc.input_channel.voltage" != "${module.driver.adc.input_channel}")) ||
            (("module.driver.adc.operation_voltage.normal1" != "${module.driver.adc.operation_voltage}") &amp;&amp;
             ("module.driver.adc.operation_voltage.low_voltage1" != "${module.driver.adc.operation_voltage}"))
        </constraint>
        <constraint id="module.driver.adc.constraint.input_scan_channel">
            eval('' +
                'var channel = "${module.driver.adc.input_channel}".split(".");' +
                'var max_scan_channel = "${config.bsp.fsp.mcu.adc_d.max_scan_channel}";'+
                'var channel_selection = Number((channel[channel.length - 1].replace("channel_","")));' +
                'var is_invalid_scan_mode = ((channel_selection &gt; max_scan_channel) &amp;&amp; ("module.driver.adc.channel_mode.scan" === "${module.driver.adc.channel_mode}"));' +
                'var output = null;' +
                'if(is_invalid_scan_mode){'+
                '    output = "When Input|Channel Selection mode is Scan mode, the Input|A/D Input channel must be Channel 0 to " + max_scan_channel + ".";'+
                '}'+
                'output'
            )
        </constraint>
        <!-- (Refer Electrical Characteristics section of the hardware manual) -->
        <constraint display="Frequency of the conversion clock (fAD) cannot be lower than 1 MHz.">
            eval('' +
                'var clock_selection = "${module.driver.adc.conversion_clock}".split(".");' +
                'var fAD = Number("${board.clock.peripheral.adc}") / (clock_selection[clock_selection.length - 1].replace("div",""));' +
                '(fAD &gt;= 1000000)'
            )
        </constraint>
        <!-- (Refer Electrical Characteristics section of the hardware manual) -->
        <constraint display="When Operation Voltage Mode is Low-Voltage 1 or 2, frequency of the conversion clock (fAD) cannot be greater than 24 MHz.">
            eval('' +
                'var clock_selection = "${module.driver.adc.conversion_clock}".split(".");' +
                'var fAD = Number("${board.clock.peripheral.adc}") / (clock_selection[clock_selection.length - 1].replace("div",""));' +
                'var cond1 = ("module.driver.adc.operation_voltage.low_voltage1" === "${module.driver.adc.operation_voltage}") || ("module.driver.adc.operation_voltage.low_voltage2" === "${module.driver.adc.operation_voltage}");' +
                'var cond2 = (fAD &gt; 24000000);' +
                '!(cond1 &amp;&amp; cond2)'
            )
        </constraint>
        <constraint display="When the internal reference voltage or temperature sensor output voltage is selected as the target for A/D conversion with low-voltage mode 2, frequency of the conversion clock (fAD) cannot be greater than 16 MHz.">
            eval('' +
                'var clock_selection = "${module.driver.adc.conversion_clock}".split(".");' +
                'var fAD = Number("${board.clock.peripheral.adc}") / (clock_selection[clock_selection.length - 1].replace("div",""));' +
                'var cond1 = ("module.driver.adc.input_channel.temperature" === "${module.driver.adc.input_channel}") || ("module.driver.adc.input_channel.voltage" === "${module.driver.adc.input_channel}");' +
                'var cond2 = ("module.driver.adc.operation_voltage.low_voltage2" === "${module.driver.adc.operation_voltage}");' +
                'var cond3 = (fAD &gt; 16000000);' +
                '!(cond1 &amp;&amp; cond2 &amp;&amp; cond3)'
            )
        </constraint>
        <constraint display="When the internal reference voltage is selected as the positive side reference voltage, frequency of the conversion clock (fAD) must be between 1 and 2 MHz.">
            eval('' +
                'var clock_selection = "${module.driver.adc.conversion_clock}".split(".");' +
                'var fAD = Number("${board.clock.peripheral.adc}") / (clock_selection[clock_selection.length - 1].replace("div",""));' +
                'var cond1 = ("module.driver.adc.positive_vref.ivref" === "${module.driver.adc.positive_vref}");' +
                'var cond2 = (fAD &gt;= 1000000) &amp;&amp; (fAD &lt;= 2000000);' +
                '!cond1 || cond2'
            )
        </constraint>
        <constraint display="When the internal reference voltage or temperature sensor output voltage is selected as the target for A/D conversion, Hardware/Software Trigger Wait Mode with One-shot Conversion Mode cannot be used.">
            (("module.driver.adc.input_channel.temperature" != "${module.driver.adc.input_channel}") &amp;&amp;
             ("module.driver.adc.input_channel.voltage" != "${module.driver.adc.input_channel}")) ||
            ("module.driver.adc.operation_trigger.wait" != "${module.driver.adc.operation_trigger}") ||
            ("module.driver.adc.conversion_operation.one_shot" != "${module.driver.adc.conversion_operation}")
        </constraint>
        <constraint display="Unique name required for each instance">
            ("${interface.driver.adc.${module.driver.adc.name}}" === "1")
        </constraint>
        <constraint display="ELC signal source selection requires an ELC Driver">
            (!"${module.driver.adc.trigger}".startsWith("_signal.")) || ("1" === "${interface.driver.elc}")
        </constraint>
        <constraint display="If snooze support is enabled, then ADC_D must use hardware trigger source">
            ("config.driver.adc.snooze_mode_support.disabled" === "${config.driver.adc.snooze_mode_support}" || "module.driver.adc.trigger_interrupt.software" != "${module.driver.adc.trigger}")
        </constraint>
        <constraint display="If snooze support is enabled, then ADC_D must use wait mode">
            ("config.driver.adc.snooze_mode_support.disabled" === "${config.driver.adc.snooze_mode_support}" || "module.driver.adc.operation_trigger.wait" == "${module.driver.adc.operation_trigger}")
        </constraint>
        <constraint display="If snooze support is enabled, then ADC_D must use one shot mode">
            ("config.driver.adc.snooze_mode_support.disabled" === "${config.driver.adc.snooze_mode_support}" || "module.driver.adc.conversion_operation.one_shot" == "${module.driver.adc.conversion_operation}")
        </constraint>
        <constraint display="If snooze support is enabled, then Interrupt Support must be enabled">
            ("config.driver.adc.snooze_mode_support.disabled" === "${config.driver.adc.snooze_mode_support}" || "config.driver.adc.interrupt_support.enabled" == "${config.driver.adc.interrupt_support}")
        </constraint>
        <requires id="module.driver.adc.requires.adc_d" interface="interface.mcu.adc_d" visible="false" display="Requires ADC_D peripheral" />
        <provides interface="interface.driver.adc" />
        <provides interface="interface.driver.adc_on_adc_d" />
        <provides interface="interface.driver.adc.${module.driver.adc.name}" />
        <property default="g_adc${_instance}" display="General|Name" id="module.driver.adc.name" description="Module name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.adc.name}")</constraint>
            <signal event="event.adc0.scan.end" />
        </property>
        <property default="module.driver.adc.resolution.resolution_12_bit" display="General|Resolution" id="module.driver.adc.resolution" description="Specifies the conversion resolution for this unit.">
            <option display="12-Bit" id="module.driver.adc.resolution.resolution_12_bit" value="ADC_RESOLUTION_12_BIT" />
            <option display="10-Bit" id="module.driver.adc.resolution.resolution_10_bit" value="ADC_RESOLUTION_10_BIT" />
            <option display="8-Bit" id="module.driver.adc.resolution.resolution_8_bit" value="ADC_RESOLUTION_8_BIT" />
        </property>
        <property default="module.driver.adc.conversion_operation.one_shot" display="General|Conversion operation" id="module.driver.adc.conversion_operation" description="Specifies the conversion operation mode.">
            <option display="One-shot" id="module.driver.adc.conversion_operation.one_shot" value="ADC_D_CONVERSION_MODE_ONESHOT"/>
            <option display="Sequential" id="module.driver.adc.conversion_operation.sequential" value="ADC_D_CONVERSION_MODE_SEQUENTIAL"/>
        </property>
        <property default="module.driver.adc.operation_trigger.wait" display="General|Operation trigger" id="module.driver.adc.operation_trigger" description="Specifies the operation trigger mode.">
            <option display="Wait" id="module.driver.adc.operation_trigger.wait" value="ADC_D_TRIGGER_MODE_WAIT"/>
            <option display="No-wait" id="module.driver.adc.operation_trigger.nowait" value="ADC_D_TRIGGER_MODE_NO_WAIT"/>
        </property>
        <property default="module.driver.adc.operation_voltage.normal1" display="General|Operation voltage" id="module.driver.adc.operation_voltage" description="Specifies operation voltage mode.">
            <option display="Normal 1" id="module.driver.adc.operation_voltage.normal1" value="ADC_D_VOLTAGE_MODE_NORMAL_1"/>
            <option display="Normal 2" id="module.driver.adc.operation_voltage.normal2" value="ADC_D_VOLTAGE_MODE_NORMAL_2"/>
            <option display="Low voltage 1" id="module.driver.adc.operation_voltage.low_voltage1" value="ADC_D_VOLTAGE_MODE_LOW_1"/>
            <option display="Low voltage 2" id="module.driver.adc.operation_voltage.low_voltage2" value="ADC_D_VOLTAGE_MODE_LOW_2"/>
        </property>
        <property default="module.driver.adc.conversion_clock.div1" display="General|Conversion Clock (fAD)" id="module.driver.adc.conversion_clock" description="Specifies divider for conversion clock (fAD).">
            <option display="PCLK" id="module.driver.adc.conversion_clock.div1" value="ADC_D_CLOCK_DIV_1"/>
            <option display="PCLK/2" id="module.driver.adc.conversion_clock.div2" value="ADC_D_CLOCK_DIV_2"/>
            <option display="PCLK/4" id="module.driver.adc.conversion_clock.div4" value="ADC_D_CLOCK_DIV_4"/>
            <option display="PCLK/8" id="module.driver.adc.conversion_clock.div8" value="ADC_D_CLOCK_DIV_8"/>
            <option display="PCLK/16" id="module.driver.adc.conversion_clock.div16" value="ADC_D_CLOCK_DIV_16"/>
            <option display="PCLK/32" id="module.driver.adc.conversion_clock.div32" value="ADC_D_CLOCK_DIV_32"/>
        </property>
        <property default="module.driver.adc.channel_mode.select" display="Input|Channel Selection Mode" id="module.driver.adc.channel_mode" description="Specifies the channel selection mode.">
            <option display="Select" id="module.driver.adc.channel_mode.select" value="ADC_D_CHANNEL_MODE_SELECT"/>
            <option display="Scan" id="module.driver.adc.channel_mode.scan" value="ADC_D_CHANNEL_MODE_SCAN"/>
        </property>
        <property default="module.driver.adc.input_channel.channel_0" display="Input|A/D Input channel" id="module.driver.adc.input_channel" description="Specifies the input channels.">
            <select enum="enum.driver.adc.input_channel" />
        </property>
        <property default="module.driver.adc.negative_vref.vss" display="Input|Negative Side Reference Voltage" id="module.driver.adc.negative_vref" description="Selection of the Negative Side Reference Voltage.">
            <option display="VSS" id="module.driver.adc.negative_vref.vss" value="ADC_D_NEGATIVE_VREF_VSS"/>
            <option display="VREFL0" id="module.driver.adc.negative_vref.vrefl0" value="ADC_D_NEGATIVE_VREF_VREFL0"/>
        </property>
        <property default="module.driver.adc.positive_vref.vcc" display="Input|Positive Side Reference Voltage" id="module.driver.adc.positive_vref" description="Selection of the Positive Side Reference Voltage.">
            <option display="VCC" id="module.driver.adc.positive_vref.vcc" value="ADC_D_POSITIVE_VREF_VCC"/>
            <option display="VREFH0" id="module.driver.adc.positive_vref.vrefh0" value="ADC_D_POSITIVE_VREF_VREFH0"/>
            <option display="Internal Reference Voltage" id="module.driver.adc.positive_vref.ivref" value="ADC_D_POSITIVE_VREF_IVREF"/>
        </property>
        <property default="NULL" display="Interrupts|Callback" id="module.driver.adc.p_callback" description="A user callback function. If this callback function is provided, it is called from the interrupt service routine (ISR) each time the ADC scan completes.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.adc.p_callback}")</constraint>
        </property>
        <property default="" display="Interrupts|Scan End Interrupt Priority" id="module.driver.adc.scan_end_ipl" description="Select scan end interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
            <interrupt event="event.adc0.scan.end" isr="adc_d_scan_end_isr"/>
        </property>
        <property default="" display="Interrupts|Start trigger source" id="module.driver.adc.trigger" description="Specifies the trigger type to be used for this unit. ">
            <select enum="enum.driver.adc.trigger_interrupt" />
            <select enum="_signal" />
            <linkConstraint display="Requires an ELC peripheral function for ADC">
                "${_link}" === "link.ad"
            </linkConstraint>
        </property>
        <property default="module.driver.adc.ulbaudsetting.condition.inrange" display="Interrupts|Conversion Result upper/lower bound value setting|Generates an interrupt request (INTAD)" id="module.driver.adc.ulbaudsetting.condition" description="Specify condition generates an interrupt(INTAD) after each time the ADC scan completes.">
            <option display="The interrupt signal is output when the ADLL register &lt;= the ADCRn register &lt;= the ADUL register" id="module.driver.adc.ulbaudsetting.condition.inrange" value="ADC_D_BOUNDARY_IN_RANGE"/>
            <option display="The interrupt signal is output when the ADCRn register &lt; the ADLL register or the ADUL register &lt; the ADCRn register" id="module.driver.adc.ulbaudsetting.condition.outrange" value="ADC_D_BOUNDARY_OUT_OF_RANGE"/>
        </property>
        <property default="255" display="Interrupts|Conversion Result upper/lower bound value setting|Upper bound (ADUL) value" id="module.driver.adc.ulbaudsetting.adul" description="Specify the upper limit conversion value that corresponds to the condition to generate an interrupt request (INTAD).">
            <constraint display="Must be a valid integer">testInteger(${module.driver.adc.ulbaudsetting.adul})</constraint>
            <constraint display="Value must be between 0 and 255">("${module.driver.adc.ulbaudsetting.adul}" &gt;= 0) &amp;&amp; ("${module.driver.adc.ulbaudsetting.adul}" &lt;= 255)</constraint>
        </property>
        <property default="0" display="Interrupts|Conversion Result upper/lower bound value setting|Lower bound (ADLL) value" id="module.driver.adc.ulbaudsetting.adll" description="Specify the lower limit conversion value that corresponds to the condition to generate an interrupt request (INTAD).">
            <constraint display="Must be a valid integer">testInteger(${module.driver.adc.ulbaudsetting.adll})</constraint>
            <constraint display="Value must be between 0 and 255">("${module.driver.adc.ulbaudsetting.adll}" &gt;= 0) &amp;&amp; ("${module.driver.adc.ulbaudsetting.adll}" &lt;= 255)</constraint>
        </property>
        <property default="" id="module.driver.adc.trigger_source">
            <export><![CDATA[eval('' +
                'var source = "${module.driver.adc.trigger}";' +
                'var trigger_source;'+
                'if (source == "SOFTWARE" || source == "TAU0_TMI01" || source == "RTC_ALARM_OR_PERIOD" || source ==  "TML0_ITL0")' +
                '{' +
                '    trigger_source = "ADC_D_TRIGGER_SOURCE_" + "${module.driver.adc.trigger}";' +
                '}' +
                'else' +
                '{'+
                '    trigger_source =  "ADC_D_TRIGGER_SOURCE_ELC";' +
                '}'+
                'trigger_source' +
                '')
                ]]>
            </export>
        </property>
        <property default="0" id="module.driver.adc.conversion_time">
            <export><![CDATA[eval('' +
                'var stab_waittime_greater_4MHZ_factor = ' +
                '{' +
                '    "ADC_D_CLOCK_DIV_32": 4,'+
                '    "ADC_D_CLOCK_DIV_16": 4,'+
                '    "ADC_D_CLOCK_DIV_8":  6,'+
                '    "ADC_D_CLOCK_DIV_4": 10,'+
                '    "ADC_D_CLOCK_DIV_2": 18,'+
                '    "ADC_D_CLOCK_DIV_1": 34 '+
                '};' +
                '' +
                'var stab_waittime_lower_4MHZ_factor = ' +
                '{' +
                '    "ADC_D_CLOCK_DIV_4": 4,'+
                '    "ADC_D_CLOCK_DIV_2": 4,'+
                '    "ADC_D_CLOCK_DIV_1": 6,'+
                '};' +
                '' +
                'var get_conversion_clock = "${module.driver.adc.conversion_clock}";' +
                'var stab_waittime_factor = ' +
                '{' +
                '    "ADC_D_GREATER_4MHZ": stab_waittime_greater_4MHZ_factor[get_conversion_clock],' +
                '    "ADC_D_LOWER_4MHZ"  : stab_waittime_lower_4MHZ_factor[get_conversion_clock]   ' +
                '};' +
                '' +
                'var get_frequency        = "${board.clock.peripheral.adc}";' +
                'var compare_frequency = (get_frequency > 4000000) ? "ADC_D_GREATER_4MHZ" : "ADC_D_LOWER_4MHZ";' +
                'var stab_waittime_checking_factor = ' +
                '{' +
                '    "ADC_D_TRIGGER_MODE_NO_WAIT": 1,' +
                '    "ADC_D_TRIGGER_MODE_WAIT"   : stab_waittime_factor[compare_frequency]' +
                '};' +
                '' +
                'var get_operation_trigger   = "${module.driver.adc.operation_trigger}";' +
                'var clock_cycle_factor = ' +
                '{' +
                '    "ADC_D_VOLTAGE_MODE_NORMAL_1": 64, ' +
                '    "ADC_D_VOLTAGE_MODE_NORMAL_2": 181,' +
                '    "ADC_D_VOLTAGE_MODE_LOW_1"   : 80, ' +
                '    "ADC_D_VOLTAGE_MODE_LOW_2"   : 107 ' +
                '};' +
                '' +
                'var get_operation_voltage   = "${module.driver.adc.operation_voltage}";' +
                'var channels_factor = ("ADC_D_CHANNEL_MODE_SCAN" == "${module.driver.adc.channel_mode}") ? 4 : 1;' +
                'var output_delaytime_factor = ' +
                '{'+
                '    "ADC_D_TRIGGER_MODE_NO_WAIT": 1,'+
                '    "ADC_D_TRIGGER_MODE_WAIT"   : 4    '+
                '};' +
                '' +
                'var conversion_time_factor  = stab_waittime_checking_factor[get_operation_trigger] ' +
                '                               + (clock_cycle_factor[get_operation_voltage] * channels_factor) ' +
                '                               + output_delaytime_factor[get_operation_trigger]; ' +
                'var get_divider             = get_conversion_clock.split("_");' +
                'var division_factor         = get_divider[get_divider.length - 1];' +
                'var conversion_clock        = parseInt(get_frequency)/parseInt(division_factor);' +
                'var conversion_time         = (conversion_time_factor/conversion_clock) * 1000000;' +
                'var max_conversion_time     = stab_waittime_checking_factor[get_operation_trigger] ' +
                '                               + (clock_cycle_factor[get_operation_voltage] * channels_factor) ' +
                '                               + output_delaytime_factor[get_operation_trigger]; ' +
                'var minimum_conversion_time = ' +
                '{' +
                '    "ADC_D_VOLTAGE_MODE_NORMAL_1": 2,' +
                '    "ADC_D_VOLTAGE_MODE_NORMAL_2": 2,' +
                '    "ADC_D_VOLTAGE_MODE_LOW_1"   : 3.33,' +
                '    "ADC_D_VOLTAGE_MODE_LOW_2"   : 3.33 ' +
                '};' +
                '' +
                'var output;' +
                'if (conversion_time >= minimum_conversion_time[get_operation_voltage] && conversion_time <= max_conversion_time)' +
                '{' +
                '    output = "ADC conversion time " + conversion_time + " us";' +
                '}' +
                'else' +
                '{' +
                '    output = "ADC conversion time (" + conversion_time + " us)" ' +
                '               + "is outside of the allowed range: ("+ minimum_conversion_time[get_operation_voltage] + "us" ' +
                '               + " <= conversion time <= " + max_conversion_time + "us" + ")";' +
                '}' +
                '' +
                'var conversion_start_time_factor = stab_waittime_checking_factor[get_operation_trigger];' +
                'var conversion_start_time = ", conversion start time: "+(conversion_start_time_factor/get_frequency)*1000000 + "us";' +
                '' +
                'output + conversion_start_time' +
                '')
                ]]>
            </export>
        </property>
        <peripheral name="ADC_D" component="adc0"/>
        <symbol id="symbol.driver.adc.name" value="${module.driver.adc.name}"/>
        <symbol id="symbol.driver.adc.cfg" value="${module.driver.adc.name}_cfg"/>
        <symbol id="symbol.driver.adc.cfg_extend" value="${module.driver.adc.name}_cfg_extend"/>
        <symbol id="symbol.driver.adc.channel_cfg" value="${module.driver.adc.name}_channel_cfg"/>
        <symbol id="symbol.driver.adc.ctrl" value="${module.driver.adc.name}_ctrl"/>
        <header>
/** ADC on ADC Instance. */
extern const adc_instance_t ${module.driver.adc.name};

/** Access the ADC instance using these structures when calling API functions directly (::p_api is not used). */
extern adc_d_instance_ctrl_t ${module.driver.adc.name}_ctrl;
extern const adc_cfg_t ${module.driver.adc.name}_cfg;
extern const adc_d_channel_cfg_t ${module.driver.adc.name}_channel_cfg;

#ifndef ${module.driver.adc.p_callback}
void ${module.driver.adc.p_callback}(adc_callback_args_t * p_args);
#endif
        </header>
        <includes>
#include &quot;r_adc_d.h&quot;
#include &quot;r_adc_api.h&quot;
        </includes>
        <declarations>

adc_d_instance_ctrl_t ${module.driver.adc.name}_ctrl;

/* ${module.driver.adc.conversion_time} */
const adc_d_extended_cfg_t ${module.driver.adc.name}_cfg_extend =
{
    .channel_mode          = ${module.driver.adc.channel_mode},
    .operation_voltage     = ${module.driver.adc.operation_voltage},
    .conversion_clockdiv   = ${module.driver.adc.conversion_clock},
    .trigger_source        = ${module.driver.adc.trigger_source},
    .operation_trigger     = ${module.driver.adc.operation_trigger},
    .conversion_operation  = ${module.driver.adc.conversion_operation},
    .upper_lower_bound     = ${module.driver.adc.ulbaudsetting.condition},
    .negative_vref         = ${module.driver.adc.negative_vref},
    .positive_vref         = ${module.driver.adc.positive_vref},
    .upper_bound_limit     = ${module.driver.adc.ulbaudsetting.adul},
    .lower_bound_limit     = ${module.driver.adc.ulbaudsetting.adll},
};
const adc_cfg_t ${module.driver.adc.name}_cfg =
{
    .unit                = 0,
    .mode                = (adc_mode_t) 0, // Unused
    .resolution          = ${module.driver.adc.resolution},
    .alignment           = (adc_alignment_t) 0, // Unused
    .trigger             = (adc_trigger_t) 0, // Unused
    .p_callback          = ${module.driver.adc.p_callback},
    .p_context           = NULL,
    .p_extend            = &amp;${module.driver.adc.name}_cfg_extend,
#if defined(VECTOR_NUMBER_ADC0_SCAN_END)
    .scan_end_irq        = VECTOR_NUMBER_ADC0_SCAN_END,
#else
    .scan_end_irq        = FSP_INVALID_VECTOR,
#endif
    .scan_end_ipl        = ${module.driver.adc.scan_end_ipl},
    .scan_end_b_irq      = FSP_INVALID_VECTOR,
    .scan_end_b_ipl      = BSP_IRQ_DISABLED,
};

const adc_d_channel_cfg_t ${module.driver.adc.name}_channel_cfg =
{
   .channel_input        = ${module.driver.adc.input_channel}
};
/* Instance structure to use this module. */
const adc_instance_t ${module.driver.adc.name} =
{
    .p_ctrl    = &amp;${module.driver.adc.name}_ctrl,
    .p_cfg     = &amp;${module.driver.adc.name}_cfg,
    .p_channel_cfg = &amp;${module.driver.adc.name}_channel_cfg,
    .p_api     = &amp;g_adc_on_adc_d
};
        </declarations>
        <api configurable="true">
            <file>ra/fsp/inc/instances/r_adc_d.h</file>
            <file>ra/fsp/inc/api/r_adc_api.h</file>
            <file>ra/fsp/inc/api/r_elc_api.h</file>
            <file>ra/fsp/inc/api/r_transfer_api.h</file>
        </api>
    </module>
</raModuleDescription>