<?xml version="1.0" ?>
<raModuleDescription>
    <config id="config.driver.usb_hhid" path="fsp_cfg/r_usb_hhid_cfg.h" version="0">
        <property id="config.driver.usb_hhid.int_in" display="Interrupt In Pipe" default="config.driver.usb_hhid.int_in.pipe6" description="Select the pipe number to use for input interrupt events.">
            <option id="config.driver.usb_hhid.int_in.pipe6" display="USB PIPE6" value="USB_PIPE6"/>
            <option id="config.driver.usb_hhid.int_in.pipe7" display="USB PIPE7" value="USB_PIPE7"/>
            <option id="config.driver.usb_hhid.int_in.pipe8" display="USB PIPE8" value="USB_PIPE8"/>
            <option id="config.driver.usb_hhid.int_in.pipe9" display="USB PIPE9" value="USB_PIPE9"/>
        </property>
        <property id="config.driver.usb_hhid.int_out" display="Interrupt Out Pipe" default="config.driver.usb_hhid.int_out.pipe9" description="Select the pipe number to use for output interrupt events.">
            <option id="config.driver.usb_hhid.int_out.pipe6" display="USB PIPE6" value="USB_PIPE6"/>
            <option id="config.driver.usb_hhid.int_out.pipe7" display="USB PIPE7" value="USB_PIPE7"/>
            <option id="config.driver.usb_hhid.int_out.pipe8" display="USB PIPE8" value="USB_PIPE8"/>
            <option id="config.driver.usb_hhid.int_out.pipe9" display="USB PIPE9" value="USB_PIPE9"/>
        </property>
        <content>
            #ifdef __cplusplus
            extern "C" {
            #endif

            #define USB_CFG_HHID_INT_IN (${config.driver.usb_hhid.int_in})
            #define USB_CFG_HHID_INT_IN2 (0xFU)
            #define USB_CFG_HHID_INT_IN3 (0x1FU)
            #define USB_CFG_HHID_INT_OUT (${config.driver.usb_hhid.int_out})

            #ifdef __cplusplus
            }
            #endif
        </content>
    </config>
    <config id="config.driver.usb_hhid_class" path="fsp_cfg/r_usb_class_cfg.h" version="0">
        <content>
        </content>
    </config>
    <module config="config.driver.usb_hhid" display="Connectivity|${module.driver.hhid.name} USB HHID (r_usb_hhid)" id="module.driver.hhid_on_usb" version="1" url="group___u_s_b___h_h_i_d.html">
        <constraint display="Unique name required for each instance">
            "${interface.driver.hhid.${module.driver.hhid.name}}" === "1"
        </constraint>
        <constraint display="Requires USB Peripheral">
          "${interface.mcu.usb_fs.external}" === "1"
        </constraint>
        <constraint display="The USB pipe numbers for Interrupt In and Interrupt Out must be different.">
            !(("${config.driver.usb_hhid.int_in}" === "config.driver.usb_hhid.int_in.pipe6") &amp;&amp;
            ("${config.driver.usb_hhid.int_out}" === "config.driver.usb_hhid.int_out.pipe6"))
        </constraint>
        <constraint display="The USB pipe numbers for Interrupt In and Interrupt Out must be different.">
            !(("${config.driver.usb_hhid.int_in}" === "config.driver.usb_hhid.int_in.pipe7") &amp;&amp;
            ("${config.driver.usb_hhid.int_out}" === "config.driver.usb_hhid.int_out.pipe7"))
        </constraint>
        <constraint display="The USB pipe numbers for Interrupt In and Interrupt Out must be different.">
            !(("${config.driver.usb_hhid.int_in}" === "config.driver.usb_hhid.int_in.pipe8") &amp;&amp;
            ("${config.driver.usb_hhid.int_out}" === "config.driver.usb_hhid.int_out.pipe8"))
        </constraint>
        <constraint display="The USB pipe numbers for Interrupt In and Interrupt Out must be different.">
            !(("${config.driver.usb_hhid.int_in}" === "config.driver.usb_hhid.int_in.pipe9") &amp;&amp;
            ("${config.driver.usb_hhid.int_out}" === "config.driver.usb_hhid.int_out.pipe9"))
        </constraint>
        <constraint display="Use USBX instead in Azure RTOS projects.">
            !testExists("${interface.rtos.tx}")
        </constraint>
        <requires id="module.driver.hhid_on_usb.requires.hhid" interface="interface.mcu.usb_fs.external" visible="false" display="Requires USB Peripheral" />
        <requires id="module.driver.basic_on_usb.requires.full_module" interface="interface.mcu.usb.pipes.0.1.2.3.4.5.6.7.8.9" visible="false" display="Requires USB Full Module" />
        <requires id="module.driver.basic_on_usb.requires.basic" interface="interface.driver.basic_on_usb_hid" display="Add USB Driver">
            <override property="module.driver.usb_basic.usb_mode" value="module.driver.usb_basic.usb_mode.host"/>
            <override property="module.driver.usb_basic.usb_classtype" value="module.driver.usb_basic.usb_classtype.hhid"/>
            <override property="module.driver.usb_basic.p_usb_reg" value="NULL"/>
        </requires>
        <requires id="module.driver.hhid_on_usb.ignore.azure_projects" interface="interface.rtos.supports.renesas_usb" visible="false" display="Use Azure USBX for Azure RTOS projects."/>
        <provides interface="interface.driver.hhid.${module.driver.hhid.name}" />
        <provides interface="interface.driver.hhid" />
        <property default="hhid" id="module.driver.hhid.hhid_interface" description=""/>
        <property default="g_hhid${_instance}" display="Name" id="module.driver.hhid.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.hhid.name}")</constraint>
        </property>

        <!-- symbol id -->
        <symbol id="symbol.driver.hhid.name" value="${module.driver.hhid.name}"/>
        <symbol id="symbol.driver.hhid.guard.type_get" value="${module.driver.hhid.name}_type_get_guard"/>
        <symbol id="symbol.driver.hhid.guard.macro.type_get" value="FSP_GUARD_${module.driver.hhid.name}_R_USB_HHID_TypeGet"/>
        <symbol id="symbol.driver.hhid.guard.max_packet_size_get" value="${module.driver.hhid.name}_max_packet_size_get_guard"/>
        <symbol id="symbol.driver.hhid.guard.macro.max_packet_size_get" value="FSP_GUARD_${module.driver.hhid.name}_R_USB_HHID_MaxPacketSizeGet"/>
        <symbol id="symbol.driver.hhid.nsc_api" value="${module.driver.hhid.name}_nsc_api"/>
        <symbol id="symbol.driver.hhid.cfg" value="${module.driver.hhid.name}_cfg"/>
        <symbol id="symbol.driver.hhid.mac_address" value="${module.driver.hhid.name}_mac_address"/>
        <symbol id="symbol.driver.hhid.num_tx_descriptions" value="${module.driver.hhid.name}_tx_descriptions"/>
        <symbol id="symbol.driver.hhid.num_rx_descriptions" value="${module.driver.hhid.name}_rx_descriptions"/>
        <symbol id="symbol.driver.hhid.ctrl" value="${module.driver.basic_on_usb.requires.basic::module.driver.basic.name}_ctrl"/>

        <header>
        /** HID Driver on USB Instance. */
        </header>
        <includes>
#include "r_usb_hhid_api.h"
#include "r_usb_hhid.h"
        </includes>
        <declarations>
        </declarations>

        <guard>
            <header>

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.hhid.name}_type_get_guard(usb_ctrl_t * const p_api_ctrl, uint8_t * p_type, uint8_t device_address);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.hhid.name}_max_packet_size_get_guard(usb_ctrl_t * const p_api_ctrl, uint16_t * p_size, uint8_t direction, uint8_t device_address);


            </header>
            <template name="${module.driver.hhid.name}_guard.c">
                <![CDATA[
                    #include "guard.h"

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.hhid.name}_type_get_guard(usb_ctrl_t * const p_api_ctrl, uint8_t * p_type, uint8_t device_address)
{
    /* Verify all pointers are in non-secure memory. */
    uint8_t *const p_type_checked = cmse_check_pointed_object(p_type, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_type_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);

    return R_USB_HHID_TypeGet(&${module.driver.basic_on_usb.requires.basic::module.driver.basic.name}_ctrl, p_type_checked, device_address);
}

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.hhid.name}_max_packet_size_get_guard(usb_ctrl_t * const p_api_ctrl, uint16_t * p_size, uint8_t direction, uint8_t device_address)
{
    /* Verify all pointers are in non-secure memory. */
    uint16_t *const p_size_checked = cmse_check_pointed_object(p_size, CMSE_AU_NONSECURE);
    FSP_ASSERT(p_size_checked != NULL);

    /* TODO: add your own security checks here */

    FSP_PARAMETER_NOT_USED(p_api_ctrl);

    return R_USB_HHID_MaxPacketSizeGet(&${module.driver.basic_on_usb.requires.basic::module.driver.basic.name}_ctrl, p_size_checked, direction, device_address);
}


                ]]>
            </template>
        </guard>
        <nsc>
            <header>

#define FSP_GUARD_${module.driver.hhid.name}_R_USB_HHID_TypeGet(p_type, device_address) ${module.driver.hhid.name}_type_get_guard(FSP_SECURE_ARGUMENT, p_type, device_address)

#define FSP_GUARD_${module.driver.hhid.name}_R_USB_HHID_MaxPacketSizeGet(p_size, direction, device_address) ${module.driver.hhid.name}_max_packet_size_get_guard(FSP_SECURE_ARGUMENT, p_size, direction, device_address)



BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.hhid.name}_type_get_guard(usb_ctrl_t * const p_api_ctrl, uint8_t * p_type, uint8_t device_address);

BSP_CMSE_NONSECURE_ENTRY fsp_err_t ${module.driver.hhid.name}_max_packet_size_get_guard(usb_ctrl_t * const p_api_ctrl, uint16_t * p_size, uint8_t direction, uint8_t device_address);


extern const usb_hhid_instance_t ${module.driver.hhid.name};

            </header>
            <declarations>
                <![CDATA[

static const usb_hhid_api_t ${module.driver.hhid.name}_nsc_api =
{
    .typeGet            = ${module.driver.hhid.name}_type_get_guard,
    .maxPacketSizeGet   = ${module.driver.hhid.name}_max_packet_size_get_guard,
};
const usb_hhid_instance_t ${module.driver.hhid.name} =
{
    .p_api = &${module.driver.hhid.name}_nsc_api,
    .p_ctrl = FSP_SECURE_ARGUMENT,
    .p_cfg = FSP_SECURE_ARGUMENT,
};


                ]]>
            </declarations>
        </nsc>

    </module>
    <module config="config.driver.usb_hhid_class" display="Connectivity|${module.driver.hhid.name} USB HHID (r_usb_hhid)" id="module.driver.hhid_class_on_usb" visible="false" version="1" url="group___u_s_b___h_h_i_d.html">

    </module>
</raModuleDescription>
